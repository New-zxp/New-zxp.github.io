<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSM笔记</title>
      <link href="/2022/09/21/ssm/"/>
      <url>/2022/09/21/ssm/</url>
      
        <content type="html"><![CDATA[<p>SSM包含：Spring、SpringMVC、Maven高级、SpringBoot、MyBatisPlus</p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>最常见的Spring有：Spring Framework、Spring Boot、Spring Cloud</p><p>Spring环境配置：在pom文件中导入Spring坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Framework是Spring生态圈中最基础的项目，是其他项目的根基</p><p>Spring Framework系统框架：</p><ul><li>Core Container：核心容器（Beans、Core、Context、SpEL）</li><li>AOP：面向切面编程</li><li>Aspects：AOP思想实现</li><li>Data Acess&#x2F;Integration：数据访问&#x2F;集成（JDBC、ORM、OXM、JMS、Transactions事务）</li><li>Web：web开发（WebSocket、Servlet、Web、Portlet）</li><li>Test：单元测试与集成测试</li></ul><h2 id="Core-Container"><a href="#Core-Container" class="headerlink" title="Core Container"></a>Core Container</h2><p>Core Container：容器基本操作</p><p>Core Container（核心容器）：Beans、Core、Context、SpEL</p><ul><li>IoC(控制反转):从主动new对象转换为由外部提供对象，对象的创建控制权由程序转移到外部</li><li>IoC容器:负责对象的创建，初始化等一系列工作，被创建或管理的对象在IoC容器中统称为Bean</li><li>Bean:被创建或管理的对象在IoC容器中统称为Bean</li><li>DI(依赖注入):在容器中建立bean与bean之间的依赖关系的整个过程</li></ul><h3 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h3><ul><li><p>在resources文件夹下创建spring config文件</p></li><li><p>配置bean：id表示bean的名字，class属性表示给bean定义类型，name表示别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;service service2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取IoC容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring config文件&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao/别名&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>配置关系：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>property标签表示配置当前bean的属性</p><p>name属性表示配置哪一个具体的属性</p><p>ref属性表示参照哪一个bean</p></li></ul><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><ul><li><p>id：bean的名称</p></li><li><p>name：别名</p></li><li><p>class：bean定义类型</p></li><li><p>scope：作用范围</p><p>singleton：单例（默认）</p><p>prototype：非单例</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xxx xyx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.x.x.x&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton/prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>适合交给容器进行管理的bean：</strong></p><ul><li>表现层对象：如servlet</li><li>业务层对象：如service</li><li>数据层对象：如dao</li><li>工具对象</li></ul><p>不适合交给容器管理的bean：封装实体的域对象</p><p><strong>Bean构造对象的方法：</strong></p><ul><li>使用构造方法：Spring创建bean调用的是无参构造器</li><li>使用静态工厂</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.factory.xxxFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getxxx&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>id：bean的名称   class：工厂类   factory-method：调用工厂的方法</p><ul><li>使用实例工厂</li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxxFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.factory.xxxFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getxxx&quot;</span> <span class="attr">fatory-bean</span>=<span class="string">&quot;xxxFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Xxx</span> <span class="variable">xxx</span> <span class="operator">=</span> (Xxx)ctx.getBean(<span class="string">&quot;xxx&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>使用FactoryBean实例化bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt;&#123;</span><br><span class="line">   <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType()&#123;</span><br><span class="line">       <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>/<span class="literal">false</span>;     <span class="comment">//单例/非单例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;bean id=<span class="string">&quot;xxx&quot;</span> class=<span class="string">&quot;com.zxp.factory.xxxFactoryBean&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Xxx</span> <span class="variable">xxx</span> <span class="operator">=</span> (Xxx)ctx.getBean(<span class="string">&quot;xxx&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>bean生命周期控制：</strong></p><ul><li>提供生命周期控制方法，并在bean定义时配置对应方法</li><li>接口控制，实现类继承InitializingBean和DisposableBean接口</li></ul><p><strong>bean生命周期</strong>：</p><ul><li>初始化容器<ol><li>创建对象（内存分配）</li><li>执行构造方法</li><li>执行属性注入（set操作）</li><li>执行bean初始化方法</li></ol></li><li>使用bean：执行业务操作</li><li>关闭&#x2F;销毁容器：执行bean销毁方法</li></ul><h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><p>DI(依赖注入):在容器中建立bean与bean之间的依赖关系的整个过程</p><p><strong>依赖注入方式：</strong></p><ul><li><p>setter注入</p><ul><li><p>简单类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.dao.impl.xxxImpl&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.dao.impl.BookServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造器注入</p><ul><li><p>简单类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.dao.impl.xxxImpl&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao(有参构造器中的形参)&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>依赖自动装配：</strong>IoC容器根据bean所依赖的资源在容器中自动查找并注入bean中的过程称为自动装配</p><p>自动装配方式：</p><ul><li><p>按类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxp.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按名称</p></li><li><p>按构造方法</p></li><li><p>不启用自动装配</p></li></ul><p>依赖自动装配特征：</p><ul><li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li><li>使用按类型装配时必须保障容器中相同类型的bean唯一，推荐使用</li><li>使用按名称装配时必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用</li><li>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效</li></ul><p><strong>集合注入</strong></p><ul><li><p>数组</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>List</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Set</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;singapore&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Property</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span>&gt;</span>singapore<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>Spring文件加载外部文件</p><ul><li><p>开启context命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用context加载properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用属性占位符${}读取properties文件中的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>加载多个properties文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,jdbc2.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加载所有properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加载所有properties文件标准格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>从类路径或jar包中搜索并加载properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注解开发定义bean</strong></p><ol><li><p>核心配置文件种通过组件扫描加载bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zxp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用@Component定义bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>写注解时根据名字获取ctx.get(“bookDao”)，不写名字根据类获取ctx.get(BookDao.class)</p></li></ol></li></ul><p><strong>Spring提供@Component注解的三个衍生注解(本质没有区别)</strong></p><ul><li>@Controller：用于表现层bean定义</li><li>@Service：用于业务层bean定义</li><li>@Repository：用于数据层bean定义</li></ul><p><strong>纯注解开发模式：</strong></p><ol><li><p>定义config.SpringConfig类</p></li><li><p>在类上加上@Configuration注解</p></li><li><p>继续加上@ComponentScan(“com.zxp”)注解，只能添加一次，多个用”,”隔开</p></li><li><p>加载配置类初始化容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConf.class)</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>注解开发控制单例或非单例：在bean的上方加上@Scope(“singleton&#x2F;prototype”)默认单例</p></li><li><p>注解开发控制生命周期：在控制方法上加上注解，初始化@PostConstruct，销毁前@PreDestroy</p></li><li><p>注解开发依赖注入引用类型：在成员变量上加上@Autowired，此时不需要set方法也可以，当一个成员变量有多个实现类时加上@Qualifier(“bean的名称”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;bean的名称&quot;)</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;&#125;</span><br></pre></td></tr></table></figure></li><li><p>注解开发依赖注入普通类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;xiaohaha&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>注解开发SpringConfig类加载配置文件：@PropertySource(“文件名”)&#x2F;&#x2F;不支持使用通配符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span><span class="comment">//name来自于配置文件</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>注解开发管理第三方bean</p><ul><li><p>在SpringConfig文件中定义一个方法获得要管理的对象</p></li><li><p>添加@Bean表示当前对象返回值为bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">   ds.setxxx();</span><br><span class="line">   ds.setxxx();</span><br><span class="line">   <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者单独定义一个类在SpringConfig种用@Import导入该类，加载多个用{}数组</p></li></ul></li><li><p>注解开发第三方依赖注入</p><ul><li><p>简单类型：定义成员变量，并用@Value赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;10&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">   ds.setAge(age);</span><br><span class="line">   <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用类型：只需要为bean定义方法设置形参就会自动匹配</p></li></ul></li></ul><h2 id="Data-Acess-x2F-Integration"><a href="#Data-Acess-x2F-Integration" class="headerlink" title="Data Acess&#x2F;Integration"></a>Data Acess&#x2F;Integration</h2><p>Data Acess&#x2F;Integration：整合数据层技术MyBatis</p><p>Data Acess&#x2F;Integration：数据访问&#x2F;数据集成（JDBC、ORM、OXM、JMS、Transactions事务）</p><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p><strong>Spring整合Mybatis</strong></p><ul><li><p>pom文件：spring-context，druid，mybatis，mysql，spring-jdbc，mybatis-spring</p><ul><li>spring-context：Spring坐标</li><li>druid：数据库连接池</li><li>spring-jdbc：spring操作数据库有关</li><li>mybatis-spring：Spring整合Mybatis的坐标</li></ul></li><li><p>注解开发：</p><ul><li><p>生成SpringConfig文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zxp&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成JdbcConfig文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成MybatisConfig文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.zxp.domain&quot;</span>);</span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb; &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.zxp.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;&#125;&#125; </span><br></pre></td></tr></table></figure></li></ul></li></ul><p>Spring整合Junit</p><ul><li>pom文件：在原来基础上导入junit和spring-test</li><li>在测试类上设置类运行器@RunWith(SpringJUnit4ClassRunner.class)</li><li>配置Spring环境@ContextConfiguration(classes &#x3D; SpringConfig.class)</li></ul><h2 id="AOP和Aspects"><a href="#AOP和Aspects" class="headerlink" title="AOP和Aspects"></a>AOP和Aspects</h2><p>AOP和Aspects：AOP基础操作和实用开发</p><p>AOP：面向切面编程</p><p>Aspects：AOP思想实现</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP：在不惊动原始设计的基础上为其进行功能增强</p><p>AOP核心概念</p><ul><li>连接点：代表所有方法</li><li>切入点：要追加功能的方法</li><li>通知：共性功能</li><li>通知类：定义通知的类</li><li>切面：切入点与通知之间的关系</li></ul><p>注解开发AOP</p><ol><li><p>导入坐标：spring-context(AOP包含在内)，aspectjweaver</p></li><li><p>制作连接点方法：所有方法</p></li><li><p>制作共性功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(System.currentTimeMills());</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义切入点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125; <span class="comment">//方法名任意</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绑定切入点与通知的关系（切面）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置在切入点pt()的前面运行当前操作（前置通知）</span></span><br><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在该类上加上@Component变成Spring控制的bean，再加上@Aspect当作AOP处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//通知类必须配置成Spring管理的bean</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//设置当前类为切面类类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>在SpringConfig中加上@EnableAspectJAutoProxy（对应@Aspect）</p></li></ol><p><strong>AOP的原理是通过原始对象的代理对象实现</strong>，若是切入点与通知匹配，则使用代理对象，若不匹配则使用原始对象</p><p>*表示任意但是必须有且只有一个，..也表示任意，可以一个也没有，也可以很多</p><p>书写技巧：</p><ul><li>描述切入点通常描述接口，而不描述实现类</li><li>书写包名尽量不用..匹配效率过低</li></ul><p>AOP通知类型</p><ul><li><p>前置通知：@Before</p></li><li><p>后置通知：@After</p></li><li><p>环绕通知：@Around</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;around before advice&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();<span class="comment">//强制抛异常</span></span><br><span class="line">    System.out.println(<span class="string">&quot;around after advice&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回后通知</p></li><li><p>抛出异常后通知</p></li></ul><p>获得被追加功能方法的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> pjp.getSignature();</span><br><span class="line">    signature.getDeclaringTypeName();<span class="comment">//获取被追加的类名</span></span><br><span class="line">    signature.getName();<span class="comment">//获取被追加的方法名</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();<span class="comment">//强制抛异常</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取被追加功能方法的参数</p><ul><li><p>JoinPoint：适用于前置，后置，返回后，抛出异常后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint jp)</span>&#123;</span><br><span class="line"> Object[] args = jp.getArgs();&#125;</span><br></pre></td></tr></table></figure></li><li><p>ProceedingJoinPoint：适用于环绕通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line"> Object[] args = pjp.getArgs();&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><p>Transactions：事务实用开发</p><p>事务作用：在数据层保障一系列的数据库操作同成功同失败</p><p>Spring事务作用：在数据层或业务层保障一系列的数据库操作同成功同失败</p><p>Spring事务：</p><ul><li><p>在方法接口上用注解@Transactional标注事务</p></li><li><p>在配置文件中配置事务管理器，并交给Spring管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">  <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    <span class="keyword">return</span> tansactionManager</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>在Spring配置文件中引入事务：用@Enable TransactionManagement标注</p></li></ul><p>注解式事务可以添加到方法上表示当前方法开启事务，也可以添加到接口上表示当前接口所有方法开启事务。</p><p>事务管理员：管理事务的总方法，事务协调员：被管理的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in,Double money)</span>&#123;</span><br><span class="line">   accountDao.outMoney(out,money);</span><br><span class="line">   accountDao.inMoney(in,money);&#125;</span><br></pre></td></tr></table></figure><p>事务相关配置</p><p>回滚事务的异常：error系，运行时异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transaction(rollbackFor = &#123;IOException.class&#125;)</span> <span class="comment">//遇到IO异常也回滚</span></span><br></pre></td></tr></table></figure><p>事务传播行为：事务协调员对事务管理员所携带事务的处理态度</p><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>SpringMVC技术与Servlet技术功能等同，均属于web层开发技术，是一种web框架层技术</p><h2 id="SpringMVC入门案例"><a href="#SpringMVC入门案例" class="headerlink" title="SpringMVC入门案例"></a>SpringMVC入门案例</h2><ul><li><p>导入SpringMVC(spring-webmvc)和Servlet坐标</p></li><li><p>创建SpringMVC控制器类（等同于Servlet功能）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/save&quot;)</span><span class="comment">//访问路径</span></span><br><span class="line">   <span class="meta">@ResponseBody</span><span class="comment">//把返回的信息整体作为内容给到外边</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;user save&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化SPringMVC环境(同Spring环境)，设定SpringMVC加载对应的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zxp.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载SpringMVC配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringMVCConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置哪些请求归SpringMVC处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;     <span class="comment">//所有请求归SpringMVC处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载Spring容器配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Spring配置文件如何避免扫描Controller:</p><ul><li><p>采用数组形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.zxp.service&quot;,&quot;com.zxp.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>排除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value=&quot;com.zxp&quot;,excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">     type = FilterType.ANNOTATION, //排除种类</span></span><br><span class="line"><span class="meta">     classes = Controller.class</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>简化开发Servlet容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMVCConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PostMan</strong>是一款功能强大的网页调试与发送网页Http请求的Chrome插件</p><p>作用：常用于接口测试</p><p><strong>Get请求发普通参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/save&quot;)</span><span class="comment">//访问路径</span></span><br><span class="line">   <span class="meta">@ResponseBody</span><span class="comment">//把返回的信息整体作为内容给到外边</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(String name，<span class="type">int</span> age)</span>&#123; <span class="comment">//接受的参数,不区分get和post</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中文乱码处理：在ServletContainersInitConfig设置过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Filter[] getServletFilters()&#123;</span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>;</span><br><span class="line">    filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span>String name，<span class="type">int</span> age)</span>&#123; <span class="comment">//接受的参数</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span>&#123; <span class="comment">//User包含name和age属性</span></span><br></pre></td></tr></table></figure><p>集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span></span><br></pre></td></tr></table></figure><p>json数据传递</p><ul><li><p>导入json坐标</p></li><li><p>Body选择raw，再选择json</p></li><li><p>在SpringMvcConfig中加入@EnableWebMvc：开启由json数据转换为对象功能</p></li><li><p>&#96;&#96;&#96; java<br>public String save(@RequestBody User user)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">RequestParam：用于接受url地址传参，表单传参</span><br><span class="line"></span><br><span class="line">RequestBody：用于接收json数据</span><br><span class="line"></span><br><span class="line">**日期类型参数传递：**</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line">@RequestMapping(&quot;/dataParam&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String dataParam(Date date,@DateTimeFormat(patter=&quot;yyyy-MM-dd&quot;) Date date1)&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    System.out.println(date1(yyyy-MM-dd));</span><br><span class="line">    return &quot;&#123;&#x27;module&#x27;:&#x27;data param&#x27;&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>响应页面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toJumpPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toJumpPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;page.jsp&quot;</span>; <span class="comment">//要跳转的页面&#125;</span></span><br></pre></td></tr></table></figure><p><strong>响应文本数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toText&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toText</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;response text&quot;</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>响应pojo对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toJsonPOJO&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toJsonPOJO</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>();</span><br><span class="line"> user.setName(<span class="string">&quot;zxp&quot;</span>);</span><br><span class="line"> user.setAge(<span class="number">15</span>);</span><br><span class="line"> <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>REST优点：隐藏资源的访问行为，无法通过地址得知资源是何种操作，简化书写</p><p>REST风格：按照访问资源时使用行为动作区分对资源进行了何种操作</p><ul><li><a href="http://localhost/users">http://localhost/users</a>       查询全部用户信息 GET</li><li><a href="http://localhost/users/%E5%8F%82%E6%95%B0">http://localhost/users/参数</a>  查询指定用户信息 GET</li><li><a href="http://localhost/users">http://localhost/users</a>       添加用户信息     POST</li><li><a href="http://localhost/users">http://localhost/users</a>       修改用户信息     PUT</li><li><a href="http://localhost/users/%E5%8F%82%E6%95%B0">http://localhost/users/参数</a>  删除用户信息     DELETE</li></ul><p>根据REST风格对资源进行访问称为RESTful</p><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p>PathVariable：映射URL绑定的占位符</p><p>@RestController &#x3D; @Controller + @ResponseBody</p><p>@DELETEMapping(“&#x2F;{id}”) &#x3D; @RequestMapping(value  &#x3D; “&#x2F;{id}”,method &#x3D; RequestMethod.DELETE)</p><p>绑定页面时需要定义SpringMvcSupport</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><strong>异常现象</strong>：所有异常均抛出到表现层进行处理（AOP）</p><ul><li>框架内部抛出的异常：因使用不合规导致</li><li>数据层抛出的异常：因外部服务器故障导致</li><li>业务层抛出的异常：因业务逻辑书写错误导致</li><li>表消除抛出的异常：因数据收集，校验等规则导致</li><li>工具类抛出的异常：因工具类书写不够严谨不够健壮导致</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">//声明异常处理器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//设置指定异常处理方案</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure><p>异常分类：</p><ul><li>业务异常：<ul><li>规范的用户行为产生的异常</li><li>不规范的用户行为产生的异常</li></ul></li><li>系统异常：项目运行过程中可预计且无法避免的异常</li><li>其他异常：编程人员未预期到的异常</li></ul><p>axios发送get请求：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&quot;/ssm/books&quot;).then((res)=&gt;&#123;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>axios发送post请求：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&quot;/ssm/books&quot;,数据).then((res) =&gt;&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器(Interceptor)是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行</p><p>作用：</p><ul><li>在指定的方法调用前后执行预先设定的代码</li><li>阻止原始方法的执行</li></ul><p>拦截器与过滤器的区别</p><ul><li>归属不同：Filter输入Servlet技术,Interceptor属于SpringMVC技术</li><li>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问增强</li></ul><p>在表现层定义拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//alt + insert覆盖前三个方法</span></span><br><span class="line">    <span class="comment">//被拦截之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//改为false为终止操作，后面两方法不执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拦截之后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandel&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拦截和post之后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">在SpringMvcSupport中重写addInterceptors方法</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">  registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>);<span class="comment">//拦截路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h1><p>Maven分模块开发：</p><ol><li>在主程序导入分模块的坐标</li><li>把分模块用Maven指令进行install</li></ol><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>可选依赖：在坐标中添加<optional>true<optional>可以隐藏使用的依赖，将不具有传递性</p><p>排除依赖：再导入别的模块坐标时，添加上<exclusions>排除依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>聚合：将多个模块组织成一个整体，同时进行项目构建的过程</p><p>聚合工程：通常是一个不具有业务功能的”空”工程（有且仅有一个pom文件）</p><p>作用：使用聚合工程可以将多个工程编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建，当工程中某个模块发生更新（变更）时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题。</p><p>打包方式</p><ul><li>默认打包方式：jar</li><li>web打包方式：war</li><li>聚合工程打包方式：pom</li></ul><p>聚合工程pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_01_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--设置管理的模块名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_02_ssm<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_03_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_04_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：常见于依赖关系的继承。</p><p>作用：</p><ul><li>简化配置</li><li>减少版本冲突</li></ul><p>继承步骤：</p><ul><li><p>创建一个空的Maven项目并将其打包方式设置为pom（可以和聚合放在一起）</p></li><li><p>在父工程中定义需要的依赖坐标</p></li><li><p>在子项目中设置其父工程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置当前工程继承自parent工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_01_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置父项目pom.xml位置路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../maven_01_parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在父工程定义依赖管理：子项目可以选择性继承</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义依赖管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>子项目的添加junit的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li><p>父工程中定义属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改依赖的version</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>配置文件加载属性</strong></p><ul><li><p>父工程定义属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>jdbc.properties文件中引用属性</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">$&#123;jdbc.url&#125;</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>设置maven过滤文件范围</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置资源目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>../maven_02_ssm/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置能够解析$&#123;&#125;，默认是false --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置多个项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">$&#123;project.basedir&#125;: 当前项目所在目录,子项目继承了父项目，</span></span><br><span class="line"><span class="comment">相当于所有的子项目都添加了资源目录的过滤</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>**..&#x2F;**：返回文件的上一级</p><p>打包的过程中如果报如下错误:Error assembling WAR</p><p>原因：Maven发现你的项目为web项目，就会去找web项目的入口web.xml[配置文件配置的方式]，发现没有找到，就会报错。</p><p>解决方案: 配置maven打包war时，忽略web.xml检查</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>版本管理</strong></p><ul><li>SNAPSHOT（快照版本）<ul><li>项目开发过程中临时输出的版本，称为快照版本</li><li>快照版本会随着开发的进展不断更新</li></ul></li><li>RELEASE（发布版本）<ul><li>项目开发到一定阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的</li><li>即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本</li></ul></li></ul><h2 id="多环节开发"><a href="#多环节开发" class="headerlink" title="多环节开发"></a>多环节开发</h2><p>配置多环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dep<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设定是否为默认启动环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.2.2.2:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.3.3.3:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>命令行实现环境切换</strong></p><p><strong>跳过测试</strong></p><ul><li><p>方式一:IDEA工具实现跳过测试，Maven右上角闪电按钮跳过所有测试</p></li><li><p>方式二：在父工程中的pom.xml中添加测试插件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--测试插件名称，可以在执行Maven时在控制台找到--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span>//true为跳过所有测试，false时根据规则跳过</span><br><span class="line">                <span class="comment">&lt;!--排除掉不参与测试的内容--&gt;</span><span class="tag">&lt;<span class="name">includes</span>&gt;</span>为包含</span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span>//排除的测试</span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/BookServiceTest.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>方式三：使用Maven的命令行，<code>mvn 指令(例如install) -D skipTests</code></p><ul><li>该命令可以不借助IDEA，直接使用cmd命令行进行跳过测试，需要注意的是cmd要在pom.xml所在目录下进行执行。</li></ul></li></ul><h2 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h2><ul><li>启动Nexus：使用cmd进入到解压目录下的<code>nexus-3.30.1-01\bin</code>，输入nexus.exe &#x2F;run nexus</li><li>浏览器访问：<a href="http://localhost:8081/">http://localhost:8081</a></li><li>账号：admin 密码：admin</li></ul><table><thead><tr><th align="center">仓库类别</th><th align="center">英文名称</th><th align="center">功能</th><th align="center">关联操作</th></tr></thead><tbody><tr><td align="center">宿主仓库</td><td align="center">hosted</td><td align="center">保存自主研发+第三方资源</td><td align="center">上传</td></tr><tr><td align="center">代理仓库</td><td align="center">proxy</td><td align="center">代理连接中央仓库</td><td align="center">下载</td></tr><tr><td align="center">仓库组</td><td align="center">group</td><td align="center">为仓库编组简化下载操作</td><td align="center">下载</td></tr></tbody></table><p><strong>本地仓库访问私服配置</strong></p><ul><li>私服上配置仓库<ol><li>点击设置</li><li>点击仓库</li><li>新建仓库</li><li>选择maven2(hosted)</li><li>创建release（发布版本）和snapshot（临时版本）</li><li>将新建的两个仓库添加到仓库组中</li></ol></li></ul><p><strong>配置本地Maven对私服的访问权限</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>itheima-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>itheima-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置私服访问路径</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置仓库组的ID--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--*代表所有内容都从私服获取--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--私服仓库组maven-public的访问路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置工程上传私服的具体位置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--配置当前工程保存在私服中的具体位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用该id对应的用户名和密码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>zxp-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--release版本上传仓库的具体地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/zxp-release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--id对应的用户名和密码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>zxp-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--snapshot版本上传仓库的具体地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/zxp-snapshot/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>发布资源到私服</strong>：Maven选择deploy命令</p><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>开发步骤：</p><ul><li>创建新模块，选择Spring初始化，并配置模块相关基础信息</li><li>选择当前模块需要使用的技术集（如SpringWeb）</li><li>开发控制器类等</li><li>运行自动生成的Application类</li></ul><p><strong>以后需要使用技术，只需要引入该技术对应的起步依赖即可</strong>(starter标志)</p><p>配置文件格式:</p><ul><li><p>修改<code>application.properties</code>文件：server.port&#x3D;80</p></li><li><p>添加application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">80</span><span class="string">（80前有空格）</span></span><br></pre></td></tr></table></figure></li><li><p>添加application.yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">80</span><span class="string">（80前有空格）</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>spring-boot-maven-plugin报红</strong>是因为确实SpringBoot的版本号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p><strong>yaml语法规则</strong>(.yml和.yaml都属于yaml)</p><ul><li><p>大小写敏感</p></li><li><p>属性层级关系使用多行描述，每行结尾使用冒号结束</p></li><li><p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</p><p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p></li><li><p>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</p></li><li><p># 表示注释</p></li></ul><p>&#x3D;&#x3D;核心规则：数据前面要加空格与冒号隔开&#x3D;&#x3D;</p><p>数组数据使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure><p>读取yaml文件数据（以上边数据为例）：</p><ul><li><p>使用 <code>@Value(&quot;表达式&quot;)</code> 注解可以读取数据，引用方式：<code>$&#123;一级属性名.二级属性名……&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String lesson;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer port;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;enterprise.subject[0]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String subject_00;</span><br></pre></td></tr></table></figure></li><li><p>Environment对象:将配置文件中所有的数据封装到 <code>Environment</code> 对象中,通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> Environment env;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">       System.out.println(env.getProperty(<span class="string">&quot;lesson&quot;</span>));</span><br><span class="line">       System.out.println(env.getProperty(<span class="string">&quot;enterprise.name&quot;</span>));</span><br><span class="line">       System.out.println(env.getProperty(<span class="string">&quot;enterprise.subject[0]&quot;</span>));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>封装到自定义的实体类对象中</p><ul><li><p>在类上添加 <code>@Component</code> 注解,将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理</p></li><li><p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件,可以使用 <code>prefix</code> 属性指定只加载指定前缀的数据</p></li><li><p>在 <code>BookController</code> 中进行注入</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Enterprise enterprise;</span><br></pre></td></tr></table></figure></li></ul><p>多环境配置:application.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><strong>命令行启动参数设置</strong></p><p>使用 <code>SpringBoot</code> 开发的程序以后都是打成 <code>jar</code> 包，通过 <code>java -jar xxx.jar</code> 的方式启动服务, <code>SpringBoot</code> 提供了在运行 <code>jar</code> 时设置开启指定的环境的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar xxx.jar –-spring.profiles.active=test</span><br></pre></td></tr></table></figure><p>修改临时端口号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar xxx.jar –-server.port=88</span><br></pre></td></tr></table></figure><p>同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar springboot.jar –-server.port=88 –-spring.profiles.active=test</span><br></pre></td></tr></table></figure><p><strong>Maven与SpringBoot开发环境兼容性问题</strong>（Maven主导）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">$&#123;profile.active&#125;</span></span><br></pre></td></tr></table></figure><p>pom文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设定是否为默认启动环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom文件中需要添加插件才能被yaml文件引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件优先级：</strong></p><p><code>SpringBoot</code> 中配置文件放置位置：级别越高优先级越高</p><ul><li>1级：classpath：application.yml</li><li>2级：classpath：config&#x2F;application.yml</li><li>3级：file ：application.yml</li><li>4级：file ：config&#x2F;application.yml</li></ul><h2 id="SpringBoot整合Junit"><a href="#SpringBoot整合Junit" class="headerlink" title="SpringBoot整合Junit"></a>SpringBoot整合Junit</h2><ul><li><p>创建Spring Initializr模块，不选择依赖</p></li><li><p>在AoolicationTests里进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot07TestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h2><ol><li><p>创建Spring Initializr模块，在SQL中选择Mybatis和Mysql依赖</p></li><li><p>把application的后缀从properties改为yml</p></li></ol>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>定义实体类：Book</p></li><li><p>定义dao接口</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxp.dao;</span><br><span class="line"><span class="keyword">import</span> com.zxp.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Mybatis</code> 会扫描接口并创建接口的代码对象交给 <code>Spring</code> 管理，但是现在并没有告诉 <code>Mybatis</code> 哪个是 <code>dao</code> 接口，需要在<code>BookDao</code> 接口上使用 <code>@Mapper</code></p><ol start="5"><li><p>定义测试类</p></li><li><p>使用druid数据源</p></li></ol><ul><li><p>导入 <code>Druid</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>application.yml</code> 配置文件配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li></ul><p>SpringBoot低版本The server time zone错误：加上时区</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br></pre></td></tr></table></figure><h1 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h1><p>MybatisPlus(简称MP)是基于MyBatis框架基础上开发的增强型工具，旨在简化开发、提供效率。</p><p>入门案例：</p><ol><li><p>创建Spring Initializr模块，在SQL中选择Mysql依赖</p></li><li><p>导入mybatis-plus-boot-starter和druid坐标</p></li><li><p>定义user类和UserDao类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxp.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.zxp.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisPlusApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>MP的特性:</p><ul><li>无侵入：只做增强不做改变，不会对现有工程产生影响</li><li>强大的 CRUD 操作：内置通用 Mapper，少量配置即可实现单表CRUD 操作</li><li>支持 Lambda：编写查询条件无需担心字段写错</li><li>支持主键自动生成</li><li>内置分页插件</li></ul><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><ul><li><p>新增:int insert (T t)&#x2F;&#x2F;新增成功后返回1，失败返回0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    userDao.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除:int deleteById (Serializable id)&#x2F;&#x2F;Serializable：参数类型(String等的父类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    userDao.deleteById(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改:int updateById(T t);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1L</span>);<span class="comment">//L表示这是一个long类型的数字</span></span><br><span class="line">        user.setName(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        userDao.updateById(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>根据ID查询:T selectById (Serializable id)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询所有:List<T> selectList(Wrapper<T> queryWrapper)<br>&#x2F;&#x2F;Wrapper：用来构建条件查询的条件，目前我们没有可直接传为Null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分页查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetByPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//第一个参数为当前页码，第二个参数为每页显示的条数</span></span><br><span class="line">    userDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页码：&quot;</span> + page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示条数：&quot;</span> + page.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数&quot;</span> + page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数&quot;</span> + page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;数据&quot;</span> + page.getRecords());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在配置文件MpConfig中添加分页拦截器才能正常运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//定义Mp拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mpInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加具体拦截器</span></span><br><span class="line">        mpInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mpInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><p>Lombok：一个Java类库，提供了一组注解，简化POJO实体类开发</p><p>添加lombok依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.18.12&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Lombok常见的注解有:</p><ul><li>@Setter:为模型类的属性提供setter方法</li><li>@Getter:为模型类的属性提供getter方法</li><li>@ToString:为模型类的属性提供toString方法</li><li>@EqualsAndHashCode:为模型类的属性提供equals和hashcode方法</li><li>&#x3D;&#x3D;@Data:是个组合注解，包含上面的注解的功能&#x3D;&#x3D;</li><li>&#x3D;&#x3D;@NoArgsConstructor:提供一个无参构造函数&#x3D;&#x3D;</li><li>&#x3D;&#x3D;@AllArgsConstructor:提供一个包含所有参数的构造函数&#x3D;&#x3D;</li></ul><p><strong>开启MP日志</strong>：在application.yml中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启mp的日志（输出到控制台）</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>条件查询三种格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">QueryWrapper</span> <span class="variable">qw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    qw.lt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);<span class="comment">//lt：小于</span></span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda格式按条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    qw.lambda().lt(User::getAge, <span class="number">10</span>);<span class="comment">//添加条件</span></span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lqw.lt(User::getAge, <span class="number">10</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    <span class="comment">//小于30且大于10</span></span><br><span class="line">    lqw.lt(User::getAge, <span class="number">30</span>).lqw.gt(User::getAge, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//小于10或者大于30</span></span><br><span class="line">    lqw.lt(User::getAge, <span class="number">10</span>).or().gt(User::getAge, <span class="number">30</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="null判定"><a href="#null判定" class="headerlink" title="null判定"></a>null判定</h2><p>后台如果想接收前端的两个数据，该如何接收?</p><p>新建一个模型类,让其继承User类，并在其中添加age2属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span><span class="comment">//Lombok注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行null判定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus02DqlApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//模拟页面传递过来的查询数据</span></span><br><span class="line">        <span class="type">UserQuery</span> <span class="variable">uq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">        uq.setAge(<span class="number">10</span>);</span><br><span class="line">        uq.setAge2(<span class="number">30</span>);</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        lqw.lt(<span class="literal">null</span>!=uq.getAge2(),User::getAge, uq.getAge2());</span><br><span class="line">        lqw.gt(<span class="literal">null</span>!=uq.getAge(),User::getAge, uq.getAge());</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h2><p><strong>查询指定字段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    <span class="comment">//只查询Id和Name</span></span><br><span class="line">    lqw.select(User::getId,User::getName);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用lambda表达式        </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lqw.select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);&#125;</span><br></pre></td></tr></table></figure><p><strong>聚合查询</strong></p><ul><li><p>count:总记录数</p></li><li><p>max:最大值</p></li><li><p>min:最小值</p></li><li><p>avg:平均值</p></li><li><p>sum:求和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    <span class="comment">//查询总数</span></span><br><span class="line">    lqw.select(<span class="string">&quot;count(*) as count&quot;</span>);</span><br><span class="line">    <span class="comment">//求年龄最大值</span></span><br><span class="line">    lqw.select(<span class="string">&quot;max(age) as maxAge&quot;</span>);</span><br><span class="line">    <span class="comment">//求年龄总和</span></span><br><span class="line">    lqw.select(<span class="string">&quot;sum(age) as sumAge&quot;</span>);</span><br><span class="line">    <span class="comment">//求年龄平均值</span></span><br><span class="line">    lqw.select(<span class="string">&quot;avg(age) as avgAge&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; userMap = userDao.selectMaps(lqw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>分组查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lqw.select(<span class="string">&quot;count(*) as count,tel&quot;</span>);</span><br><span class="line">    lqw.groupBy(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = userDao.selectMaps(lqw);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h2><p><strong>查询条件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    <span class="comment">//查询名字为jerry密码也为jerry的用户，eq()相当于&quot;=&quot;</span></span><br><span class="line">    lqw.eq(User::getName, <span class="string">&quot;Jerry&quot;</span>).eq(User::getPassword, <span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userDao.selectOne(lqw);<span class="comment">//查询一个</span></span><br><span class="line">    System.out.println(loginUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范围查询</strong>:</p><ul><li>gt():大于(&gt;)</li><li>ge():大于等于(&gt;&#x3D;)</li><li>lt():小于(&lt;)</li><li>lte():小于等于(&lt;&#x3D;)</li><li>between():between ? and ?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lqw.between(User::getAge, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="comment">//SELECT id,name,password,age,tel FROM user WHERE (age BETWEEN ? AND ?)</span></span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模糊查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lqw.likeLeft(User::getName, <span class="string">&quot;J&quot;</span>);</span><br><span class="line">    <span class="comment">//SELECT id,name,password,age,tel FROM user WHERE (name LIKE %?)</span></span><br><span class="line">    List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射匹配兼容性"><a href="#映射匹配兼容性" class="headerlink" title="映射匹配兼容性"></a>映射匹配兼容性</h2><ul><li><p>当表的列名和模型类的属性名发生不一致，就会导致数据封装不到模型对象</p><p>@TableField:使用该注解可以实现模型类属性名和表的列名之间的映射关系</p></li><li><p>编码中添加了数据库未定义的属性</p><p>在未定义的属性上加上@TableField（exist &#x3D; false）表示数据库里不存在</p></li><li><p>不想让密码被查询出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="meta">@TableField(value=&quot;pwd&quot;,select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>表名与编码开发设计不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="id生成策略控制"><a href="#id生成策略控制" class="headerlink" title="id生成策略控制"></a>id生成策略控制</h2><p><strong>不同的表应用不同的id生成策略</strong></p><ul><li>日志：自增（1,2,3,4，……）</li><li>购物订单：特殊规则（FQ23948AK3843）</li><li>外卖单：关联地区日期等信息（10 04 20200314 34 91）</li><li>关系表：可省略id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>NONE: 不设置id生成策略</p></li><li><p>AUTO：使数据库ID自增</p></li><li><p>INPUT：用户手工输入id（user.setId(xxx)）</p><p>这种ID生成策略，需要将表的自增策略删除掉</p></li><li><p>ASSIGN_ID：雪花算法生成id(可兼容数值型与字符串型)</p><p>主键的类型是bigInt</p></li><li><p>ASSIGN_UUID：以UUID生成算法作为id生成策略</p><p>主键改成varchar(String)类型，长度要大于32</p></li><li><p>其他的几个策略均已过时，都将被ASSIGN_ID和ASSIGN_UUID代替掉。</p></li></ul><p><strong>所有模型使用相同的id生成策略</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">    <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br><span class="line">    <span class="comment">#默认表名前缀</span></span><br><span class="line">    <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br></pre></td></tr></table></figure><h2 id="多数据操作（删除与查询）"><a href="#多数据操作（删除与查询）" class="headerlink" title="多数据操作（删除与查询）"></a>多数据操作（删除与查询）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//删除指定多条数据</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">2</span>);</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//根据传入的id集合将数据库表中的数据删除掉</span></span><br><span class="line">    userDao.deleteBatchIds(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetByIds</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询指定多条数据</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    list.add(<span class="number">4</span>);</span><br><span class="line">    userDao.selectBatchIds(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>逻辑删除:为数据设置是否可用状态字段，删除时设置状态字段为不可用状态，数据保留在数据库中，执行的是update操作</p><ol><li><p>修改数据库表添加<code>deleted</code>列（设置默认值为0）</p></li><li><p>实体类添加属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="meta">@TableLogic(value=&quot;0&quot;,delval=&quot;1&quot;)</span></span><br><span class="line">    <span class="comment">//value为正常数据的值，delval为删除数据的值</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;&#125;</span><br></pre></td></tr></table></figure><p>或者在配置文件中添加全局配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 逻辑删除字段名</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="comment"># 逻辑删除字面值：未删除为0</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 逻辑删除字面值：删除为1</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>MP的逻辑删除会将所有的查询都添加一个未被删除的条件，已经被删除的数据没有查询出来。</p></li></ol><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>业务并发现象带来的问题:&#x3D;&#x3D;秒杀&#x3D;&#x3D;：假如有100个商品或者票在出售，为了能保证每个商品或者票只能被一个人购买，如何保证不会出现超买或者重复卖</p><p>乐观锁适用于并发量小于2000的情况</p><ol><li><p>列名可以任意，比如使用<code>version</code>,给列设置默认值为<code>1</code></p></li><li><p>在模型类中添加对应的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;    </span><br><span class="line">    <span class="meta">@Version</span>  </span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加乐观锁的拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义Mp拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mpInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加乐观锁拦截器</span></span><br><span class="line">        mpInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mpInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要想实现乐观锁，首先第一步应该是拿到表中的version，然后拿version当条件将version加1更新回到数据库表中</p><p>两种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">3L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Jock666&quot;</span>);</span><br><span class="line">    user.setVersion(<span class="number">1</span>);</span><br><span class="line">    userDao.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.先通过要修改的数据id将当前数据查询出来</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">3L</span>);</span><br><span class="line">    <span class="comment">//2.将要修改的属性逐一设置进去</span></span><br><span class="line">    user.setName(<span class="string">&quot;Jock888&quot;</span>);</span><br><span class="line">    userDao.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>原理：</p><ul><li>假如第一个线程先执行更新，会把version改为2，</li></ul><ul><li>第二个线程再更新的时候，set version &#x3D; 2 where version &#x3D; 1,此时数据库表的数据version已经为2，所以第二个线程会修改失败</li><li>不管谁先执行都会确保只能有一个线程更新数据，这就是MP提供的乐观锁的实现原理分析。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="comment">//1.先通过要修改的数据id将当前数据查询出来</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">3L</span>);     <span class="comment">//version=1</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userDao.selectById(<span class="number">3L</span>);    <span class="comment">//version=1</span></span><br><span class="line">    user2.setName(<span class="string">&quot;Jock aaa&quot;</span>);</span><br><span class="line">    userDao.updateById(user2);              <span class="comment">//version=2</span></span><br><span class="line">    user.setName(<span class="string">&quot;Jock bbb&quot;</span>);</span><br><span class="line">    userDao.updateById(user);               <span class="comment">//verion=1条件不成立</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><ol><li><p>导入对应的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码生成器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--velocity模板引擎--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建代码生成类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取代码生成器的对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置数据库相关配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dataSource.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/ssm&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="comment">//设置代码生成位置       </span></span><br><span class="line">globalConfig.setOutputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/模块名/src/main/java&quot;</span>);    </span><br><span class="line">    globalConfig.setOpen(<span class="literal">false</span>);    <span class="comment">//设置生成完毕后是否打开生成代码所在的目录</span></span><br><span class="line">    globalConfig.setAuthor(<span class="string">&quot;xxx&quot;</span>);    <span class="comment">//设置作者</span></span><br><span class="line">    globalConfig.setFileOverride(<span class="literal">true</span>);  <span class="comment">//设置是否覆盖原始生成的文件</span></span><br><span class="line">    globalConfig.setMapperName(<span class="string">&quot;%sDao&quot;</span>); <span class="comment">//设置数据层接口名，%s为占位符，指代模块名称</span></span><br><span class="line">    globalConfig.setIdType(IdType.ASSIGN_ID);   <span class="comment">//设置Id生成策略</span></span><br><span class="line">    autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置包名相关配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">packageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        packageInfo.setParent(<span class="string">&quot;com.zxp&quot;</span>);   <span class="comment">//设置生成的包名</span></span><br><span class="line">        packageInfo.setEntity(<span class="string">&quot;domain&quot;</span>);    <span class="comment">//设置实体类包名</span></span><br><span class="line">        packageInfo.setMapper(<span class="string">&quot;dao&quot;</span>);   <span class="comment">//设置数据层包名</span></span><br><span class="line">        autoGenerator.setPackageInfo(packageInfo);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//策略设置</span></span><br><span class="line">     <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">     strategyConfig.setInclude(<span class="string">&quot;tbl_user&quot;</span>);  <span class="comment">//设置当前参与生成的表名，参数为可变参数</span></span><br><span class="line">     strategyConfig.setTablePrefix(<span class="string">&quot;tbl_&quot;</span>);  <span class="comment">//设置数据库表的前缀名称，tbl_会去掉</span></span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="literal">true</span>);    <span class="comment">//设置是否启用Rest风格</span></span><br><span class="line">        strategyConfig.setVersionFieldName(<span class="string">&quot;version&quot;</span>);  <span class="comment">//设置乐观锁字段名</span></span><br><span class="line">        strategyConfig.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);  <span class="comment">//设置逻辑删除字段名</span></span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="literal">true</span>);  <span class="comment">//设置是否启用lombok</span></span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line">        <span class="comment">//2.执行生成操作</span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内安卓免拔卡使用tiktok</title>
      <link href="/2022/09/20/tiktok/"/>
      <url>/2022/09/20/tiktok/</url>
      
        <content type="html"><![CDATA[<h3 id="需要魔法上网环境"><a href="#需要魔法上网环境" class="headerlink" title="需要魔法上网环境"></a>需要魔法上网环境</h3><h3 id="加入tiktok破解版电报群，下载最新破解版tiktok"><a href="#加入tiktok破解版电报群，下载最新破解版tiktok" class="headerlink" title="加入tiktok破解版电报群，下载最新破解版tiktok"></a>加入tiktok破解版电报群，下载最新破解版tiktok</h3><p><a href="https://t.me/tiktalktik">点击进入电报群</a></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>下载完成后tiktok会要求你进行设置</p><p>①Change Contents Region：选择你想看的tiktok地区<br>②Change Download Location(videos)：改变视频下载路径（默认就好）<br>③Change Download Location(GIF)：改变图片下载路径（默认就好）<br>④Force Region Mode：打开以后就只能刷到选择地区的tiktok视频（不推荐）</p><img src="https://zhuxinpeng.oss-cn-hangzhou.aliyuncs.com/tiktok.png"><h3 id="设置完成就可以开始刷视频了"><a href="#设置完成就可以开始刷视频了" class="headerlink" title="设置完成就可以开始刷视频了"></a>设置完成就可以开始刷视频了</h3><h3 id="如果想要重新设置想看地区，点击设置里的Change-Region可以重新进行配置"><a href="#如果想要重新设置想看地区，点击设置里的Change-Region可以重新进行配置" class="headerlink" title="如果想要重新设置想看地区，点击设置里的Change Region可以重新进行配置"></a>如果想要重新设置想看地区，点击设置里的Change Region可以重新进行配置</h3><h3 id="破解版支持登录，点赞，评论功能"><a href="#破解版支持登录，点赞，评论功能" class="headerlink" title="破解版支持登录，点赞，评论功能"></a>破解版支持登录，点赞，评论功能</h3>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tiktok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/2022/09/10/git/"/>
      <url>/2022/09/10/git/</url>
      
        <content type="html"><![CDATA[<p>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：所有github密码都是这个！</p><p>更换主题：git clone -b master + http + themes&#x2F;名字<br>①hexo clean<br>②hexo g<br>③hexo d<br>更改后记得清除缓存</p><p>Github用https克隆！！！<br>修改C:\Windows\System32\drivers\etc\hosts:140.82.114.4 github.com</p><p>ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#x6d;</a>时要输入密码直接输入：<br>git config –global http.proxy <a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a><br>git config –global https.proxy <a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a></p><p>！！！切换分支之前先提交本地修改</p><p>Git Gui：图形界面工具<br>Git Bash：命令行工具</p><p>touch 文件名称.文件类型   创建文件</p><p>git config –global user.name “XXX” # 设置用户名<br>git config –global user.email “XXXX” # 设置邮箱</p><p>为操作取别名：<br>①创建.bashrc文件：touch ~&#x2F;.bashrc<br>②在创建的文件中输入：</p><p>用于输出git提交日志 </p><p>alias git-log&#x3D;’git log –pretty&#x3D;oneline –all –graph –abbrev-commit’<br>#用于输出当前目录所有文件及基本信息<br>alias ll&#x3D;’ls -al’</p><p>解决GitBsh乱码问题：<br>①在GItBash执行：git config –global core.quotepath flase<br>②在安装目录&#x2F;etc&#x2F;bash.bashrc文件加入：<br>export LANG&#x3D;”zh_CN.UTF-8”<br>export LC_ALL&#x3D;zh_CN.UTF-8”</p><p>获取本地仓库：在一个目录中打开Git bash，执行：git init</p><p>工作区（workspace）→ 暂存区（index）→ 仓库（repository）</p><p>新创建的文件处于”未跟踪状态“通过git add转为”已暂存“状态再通过git commit提交进仓库，增加一条提交记录<br>修改已有文件文件处于”未暂存状态“通过git add转为”已暂存“状态再通过git commit提交进仓库，增加一条提交记录</p><p>git status：查看文件状态<br>git add 文件名：把文件添加到暂存区<br>git add .  ：把所有文件添加到暂存区<br>git commit -m “标记信息”：添加到仓库（有空格）<br>vi 文件名：进入vi编辑器<br>vi退出编辑时，按esc，输入冒号（英文），然后切换到最后一行模式，最后一行模式决定是否保存文件。例如输入wq保存并退出。<br>ll：输出当前目录所有文件及基本信息<br>ls -al：输出当前目录所有文件及基本信息<br>git log –all：显示所有分支<br>git log –pretty&#x3D;online：将提交信息显示为一行<br>git log –abbrev-commit：使得输出的commited更简短<br>git log –graph：以图的形式显示<br>git log –pretty&#x3D;oneline –all –graph –abbrev-commit：叠加使用<br>注意：上边已经起了别名git-log&#x3D;’git log –pretty&#x3D;oneline –all –graph –abbrev-commit’<br>git reset –hard commitID：版本切换 commitID可以用git-log或git log查看<br>选中默认就是赋值！！！然后鼠标单机滚轮就是粘贴<br>git reflog：获取操作记录</p><p>添加文件至忽略列表(添加后记得刷新提交目录)：<br>在工作目录创建.gitignore文件，列出要忽略的文件模式，例如：file.txt（文件名）或通配符 *.a（a类型的文件）<br>创建好后需要添加并提交</p><p>分支：几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p>HEAD指向的是当前分支<br>git branch：查看本地分支<br>git branch 分支名：创建本地分支<br>git checkout 分支名：切换分支<br>有多个分支时，只能对一个分支进行修改，称为当前分支<br>git checkout -b 分支名：直接切换到一个不存在的分支（创建并切换）<br>git merge 分支名：一个分支上的提交可以合并到另一个分支（需要添加并提交）<br>删除分支：不能删除当前分支，只能删除其他分支<br>git branch -d 分支名：删除分支时，需要做各种检查<br>git branch -D 分支名：不做任何检查，强制删除</p><p>在开发中分支使用原则与流程：<br>master（生产）分支：线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；<br>develop（开发）分支：是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支，准备上线。<br>feature&#x2F;xxxx分支：从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支，之后该分支可以删除。<br>hotfix&#x2F;xxxx分支：从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支。<br>master和develop是固定的，不要删除</p><p>ls -al ~&#x2F;.ssh：查看现有公钥<br>Gitee使用<br>①在gitee创建仓库（下边的不要勾选）<br>②在本地仓库输入：<br>git config –global user.name “zhaobaogang”<br>git config –global user.email “<a href="mailto:&#x31;&#49;&#x36;&#x33;&#x32;&#x38;&#49;&#x38;&#43;&#x7a;&#104;&#x61;&#111;&#x62;&#97;&#x6f;&#103;&#x61;&#110;&#x67;&#x40;&#x75;&#x73;&#x65;&#114;&#x2e;&#110;&#x6f;&#114;&#x65;&#x70;&#x6c;&#x79;&#46;&#103;&#x69;&#116;&#x65;&#101;&#46;&#99;&#x6f;&#109;">&#x31;&#49;&#x36;&#x33;&#x32;&#x38;&#49;&#x38;&#43;&#x7a;&#104;&#x61;&#111;&#x62;&#97;&#x6f;&#103;&#x61;&#110;&#x67;&#x40;&#x75;&#x73;&#x65;&#114;&#x2e;&#110;&#x6f;&#114;&#x65;&#x70;&#x6c;&#x79;&#46;&#103;&#x69;&#116;&#x65;&#101;&#46;&#99;&#x6f;&#109;</a>“<br>③生成SSH公钥：ssh-keygen -t rsa<br>④获取公钥：cat ~&#x2F;.ssh&#x2F;id_rsa.pub（一直回车）<br>⑤在gitee设置中输入公钥<br>⑥验证是否配置成功：ssh -T <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#101;&#x65;&#x2e;&#99;&#111;&#109;">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#101;&#x65;&#x2e;&#99;&#111;&#109;</a><br>⑦选择ssh复制，在本地输入：git remote add 名字（一般为origin） + ssh<br>⑧输入git remote获取远程仓库查看是否添加成功<br>⑨把本地代码同步到远程仓库：git push origin master<br>1.完整代码为 git push [-f] [–set-upstream] [远端名称] [本地分支] [远端分支名]<br>2.如果远端分支名和本地分支名相同，可以只写本地分支<br>3.-f表示强制覆盖<br>4.–set-upstream推送到远端的同时并且建立起和远端分支的联系<br>5.如果本地已经和远端分支关联，则可以省略分支名和远端名</p><p>git branch -vv：获取本地分支与远端分支的关联关系</p><p>克隆<br>①复制要克隆仓库的SSH地址<br>②在文件夹中git clone + ssh地址 [仓库名称]      如果不设置仓库名称就默认和复制的仓库名一样</p><p>从远程仓库抓取和拉取：远程分支和本地分支一样，我们可以进行marge操作，只是需要把远程仓库的更新都下载到本地，在进行操作<br>抓取命令：git fetch [remote name] [branch name]<br>①抓取指令就是将仓库里的更新都抓取到本地，不会进行合并<br>②如果不指定远端名称和分支名，则抓取所有分支<br>拉取命令：git pull [remote name] [branch name]<br>①拉去指令就是将远端仓库的修改拉取到本地并自动进行合并，等同于fetch+marge<br>②如果不指定远端名称和分支名，则抓取并更细当前分支</p><p>IDEA中移除本项目git配置：<br>File –&gt; Settings –&gt; Version Control → Directory Mappings 并移除当前项目的git配置<br>Idea使用Git（失败时点击CommitAnyway）:<br>①在Idea中设置Git<br>②在gitee新建仓库并复制ssh<br>③在Idea中添加gitignore<br>④在idea创建Git仓库：Git → create Git Repository<br>⑤连接远程仓库</p><p>Idea克隆：Git → clone 输入克隆ssh</p><p>Idea创建分支：<br>①第一种方法：右下角 → New Branch<br>②第二种方法：在log中的修改记录上New Branch </p><p>Idea合并分支：右下角选择你要和当前分支合并的分支</p><p>Idea切换分支：右下角选择分支→checkout</p><p>蓝色箭头：git pull<br>绿色箭头：git push<br>绿色对勾：git commit<br>fetch：Git → fetch</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb笔记</title>
      <link href="/2022/07/10/Web/"/>
      <url>/2022/07/10/Web/</url>
      
        <content type="html"><![CDATA[<p>登录MySql：mysql -u用户名 -p密码 -h要连接的mysql服务器的ip地址(默认127.0.0.1) -P端口号(默认3306)</p><p>单行注释：– 注释内容（注意–后边有空格）或#注释内容（MySQL特有）<br>多行注释：&#x2F;<em>注释</em>&#x2F;</p><p>tinyint: 小整数型，占一个字节<br>int：大整数类型，占四个字节<br>double：浮点类型 使用格式： 字段名 double(总长度,小数点后保留的位数)<br>date：日期值。只包含年月日<br>datetime：混合日期和时间值。包含年月日时分秒<br>char：定长字符串。      优点：存储性能高 缺点：浪费空间      name char(10) 如果存储的数据字符个数不足10个，也会占10个的空间<br>varchar：变长字符串。 优点：节约空间    缺点：存储性能底   name varchar(10) 如果存储的数据字符个数不足10个，那就数据字符个数是几就占几个的空间</p><p>SQL分类：</p><p>DDL：数据定义语言，用来定义数据库对象：数据库，表，列等；就是用来操作数据库，表等</p><p>操作数据库：<br>SHOW DATABASES：查询所有的数据库<br>CREATE DATABASE 数据库名称：创建数据库<br>CREATE DATABASE IF NOT EXISTS 数据库名称：创建数据库(判断，如果不存在则创建)<br>DROP DATABASE 数据库名称：删除数据库<br>DROP DATABASE IF EXISTS 数据库名称：删除数据库(判断，如果存在则删除)<br>USE 数据库名称：使用数据库<br>SELECT DATABASE()：查看当前使用的数据库</p><p>操作表：<br>查询当前数据库下所有表名称：SHOW TABLES：<br>创建表：CREATE TABLE 表名 ( 字段名1 数据类型1, 字段名2 数据类型2, …字段名n 数据类型n );<br>查询表结构：DESC 表名称<br>删除表：DROP TABLE 表名;<br>删除表时判断表是否存在：DROP TABLE IF EXISTS 表名;<br>修改表名：ALTER TABLE 表名 RENAME TO 新的表名;<br>添加一列：ALTER TABLE 表名 ADD 列名 数据类型;<br>修改数据类型：ALTER TABLE 表名 MODIFY 列名 新数据类型;<br>修改列名和数据类型：ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型;<br>删除列：ALTER TABLE 表名 DROP 列名;</p><p>DML：数据操作语言，用来对数据库中表的数据进行增删改；就是对表中数据进行增删改</p><p>给指定列添加数据：INSERT INTO 表名(列名1,列名2,…) VALUES(值1,值2,…);<br>给全部列添加数据：INSERT INTO 表名 VALUES(值1,值2,…);<br>批量添加数据：INSERT INTO 表名(列名1,列名2,…) VALUES(值1,值2,…)； INSERT INTO 表名 VALUES(值1,值2,…)；&#x2F;&#x2F;给所有列添加可以省略<br>修改表数据：UPDATE 表名 SET 列名1&#x3D;值1,列名2&#x3D;值2,… [WHERE 条件] ;</p><p>update stu set sex &#x3D; ‘女’ where name &#x3D; ‘张三’;&#x2F;&#x2F;名字为张三时，性别改为女</p><ol><li>修改语句中如果不加条件，则将表中所有数据都修改！</li><li>像上面的语句中的中括号，表示在写sql语句中可以省略这部分<br>删除数据：DELETE FROM 表名 [WHERE 条件] ;&#x2F;&#x2F;如果不加条件，则将表中所有数据都被删除</li></ol><p>DQL：数据查询语言，用来查询数据库中表的记录(数据)；就是对数据进行查询操作。从数据库表中查询到我们想要的数据。</p><p>SELECT         字段列表<br>FROM           表名列表<br>WHERE         条件列表<br>GROUP BY   分组字段<br>HAVING       分组后条件<br>ORDER BY    排序字段<br>LIMIT             分页限定<br>①查询所有列的数据可以用*代替，不要使用！<br>②使用distinct修饰字段可以去除重复记录<br>③字段后加as可以给字段起别名<br>④字段后加like表示占位符 &#x2F;&#x2F;模糊查询  _ : 代表单个任意字符     % : 代表任意个数字符<br>select * from stu where name like ‘马%’; &#x2F;&#x2F;查询姓’马’的学员信息<br>select * from stu where name like ‘_花%’;&#x2F;&#x2F;查询第二个字是’花’的学员信息<br>select * from stu where name like ‘%德%’;&#x2F;&#x2F;查询名字中包含 ‘德’ 的学员信息</p><p>字段排序：SELECT 字段列表 FROM 表名 ORDER BY 排序字段名1 [排序方式1],排序字段名2 [排序方式2] …;<br>①ASC ： 升序排列 （默认值） DESC ： 降序排列<br>②如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</p><p>聚合函数：将一列数据作为一个整体，进行纵向计算。<br>SELECT 聚合函数名(列名) FROM 表;  &#x2F;&#x2F;null 值不参与所有聚合函数运算<br>count(列名) ：统计数量<br>max(列名) ：  最大值<br>min(列名) ：  最小值<br>sum(列名) ： 求和<br>avg(列名) ： 平均值</p><p>分组查询：SELECT 字段列表 FROM 表名 [WHERE 分组前条件限定] GROUP BY 分组字段名 [HAVING 分组后条件过滤];<br>&#x2F;&#x2F;分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</p><p>分页查询：SELECT 字段列表 FROM 表名 LIMIT 起始索引 , 查询条目数;<br>①上述语句中的起始索引是从0开始<br>②计算公式：起始索引 &#x3D; (当前页码 - 1) * 每页显示的条数<br>③limit是MySQL方言，Oracle使用rownumber,SQL Server使用top</p><p>DCL：数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户；就是对数据库进行权限控制。比如我让某一个数据库表只能让某一个用户进行操作等。</p><p>约束：在创建表时，添加元素后面添加约束，比如id int NOT NUL UNIQUE表示非空且唯一，不需要连接符</p><p>非空约束： 关键字是 NOT NULL，保证列中所有的数据不能有null值。<br>①建完表后添加：ALTER TABLE 表名 MODIFY 字段名 数据类型 NOT NULL;<br>②删除约束：ALTER TABLE 表名 MODIFY 字段名 数据类型;</p><p>唯一约束： 关键字是 UNIQUE，保证列中所有数据各不相同。<br>①建完表后添加：ALTER TABLE 表名 MODIFY 字段名 数据类型 UNIQUE;<br>②删除约束：ALTER TABLE 表名 DROP INDEX 字段名;</p><p>主键约束： 关键字是 PRIMARY KEY，主键是一行数据的唯一标识，要求非空且唯一。一般我们都会给每张表添加一个主键列用来唯一标识数据，例如id<br>①建完表后添加： ALTER TABLE 表名 ADD PRIMARY KEY(字段名);<br>②删除约束：ALTER TABLE 表名 DROP PRIMARY KEY;</p><p>检查约束： 关键字是 CHECK，保证列中的值满足某一条件。&#x2F;&#x2F;MySQL不支持检查约束。</p><p>默认约束： 关键字是 DEFAULT，保存数据时，未指定值则采用默认值。<br>①建完表后添加： ALTER TABLE 表名 ALTER 列名 SET DEFAULT 默认值;<br>②删除约束：ALTER TABLE 表名 ALTER 列名 DROP DEFAULT;</p><p>自动增长： auto_increment 当列是数字类型 并且唯一约束，会随着行数自动增长</p><p>外键约束： 关键字是 FOREIGN KEY，外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。<br>①创建表时添加：<br>CREATE TABLE 表名(<br>列名 数据类型,<br>…<br>[CONSTRAINT]  [外键名称] FOREIGN KEY (外键列名)  REFERENCES 主表(主表列名) );<br>②建完表后添加：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);<br>③删除外键约束：ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;<br>④先添加主表，再添加从表</p><p>多对多表关系：实现方式建立第三张中间表，中间表至少包含两个外键，分别关联两方主键<br>一对一表关系：实现方式在任意一方加入外键，关联另一方主键，并且设置外键列为唯一(UNIQUE)</p><p>内连接查询：相当于查询AB交集数据  例：select * from emp , dept where emp.dep_id &#x3D; dept.did;<br>①隐式内连接 SELECT 字段列表 FROM 表1,表2… WHERE 条件;<br>②显示内连接 SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 条件;<br>外连接查询：<br>①左外连接查询 ：相当于查询A表所有数据和交集部门数据         SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件;<br>②右外连接查询 ：相当于查询B表所有数据和交集部分数据         SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件;</p><p>子查询：查询中嵌套查询，称嵌套查询为子查询。<br>①子查询语句结果是单行单列，子查询语句作为条件值，使用 &#x3D; !&#x3D; &gt; &lt; 等进行条件判断<br>例：select * from emp where salary &gt; (select salary from emp where name &#x3D; ‘猪八戒’);<br>②子查询语句结果是多行单列，子查询语句作为条件值，使用 in 等关键字进行条件判断<br>例：select * from emp where dep_id in (select did from dept where dname &#x3D; ‘财务部’ or dname &#x3D; ‘市场部’);<br>③子查询语句结果是多行多列，子查询语句作为虚拟表<br>例：select * from (select * from emp where join_date &gt; ‘2011-11-11’ ) t1, dept where t1.dep_id &#x3D; dept.did;</p><p>数据库的事务：是一种机制、一个操作序列，包含了一组数据库操作命令，这一组数据库命令要么同时成功，要么同时失败。<br>①开启事务：START TRANSACTION 或者 BEGIN<br>②提交事务：commit<br>③回滚事务：rollback<br>事务的四大特征**********：<br>原子性：事务是不可分割的最小操作单位，要么同时成功，要么同时失败<br>一致性：事务完成时，必须使所有的数据都保持一致状态<br>隔离性：多个事务之间，操作的可见性<br>持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</p><p>JDBC<br>①获取Connect(不变)<br>&#x2F;&#x2F; 加载配置文件<br>Properties prop &#x3D; new Properties();<br>prop.load(new FileInputStream(“s-demo&#x2F;src&#x2F;druid.properties”));<br>&#x2F;&#x2F;获取连接池对象<br>DataSource dataSource &#x3D; DruidDataSourceFactory.createDataSource(prop);<br>&#x2F;&#x2F; 获取数据库连接<br>Connection conn &#x3D; dataSource.getConnection();<br>②定义SQL语句<br>③获取PreparedStatement对象(不变)         PreparedStatement pstmt &#x3D; conn.prepareStatement(sql);<br>④设置参数：需要&#x2F;不需要<br>⑤执行SQL(不变)                                        ResultSet rs &#x3D; pstmt.executeQuery();<br>⑥处理结果<br>⑦释放资源 (不变)                                      rs.close();   pstmt.close();  conn.close();&#x2F;&#x2F;增删改时没有rs</p><p>DriverManager：驱动管理类<br>static void registerDriver(Driver driver)：使用DriverManager注册给定的驱动程序<br>static Connection getConnection(String url, String user, String password)：尝试建立与给定数据库URL的连接，并返回一个连接对象</p><p>URL：连接路径<br>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称?参数键值对1&amp;参数键值对2…<br>示例：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1<br>①如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称?参数键值对<br>②配置 useSSL&#x3D;false 参数，禁用安全连接方式，解决警提示jdbc:mysql:&#x2F;&#x2F;db1?useSSL&#x3D;false</p><p>Connection：数据库连接类            作用：获取执行 SQL 的对象和管理事务<br>①普通执行SQL对象：Statement createStatement()<br>②预编译SQL的执行SQL对象（防止SQL注入）：PreparedStatement prepareStatement(sql)<br>③执行存储过程的对象：CallableStatement prepareCall(sql)</p><p>JDBC事务管理的方法：Connection接口中定义了3个对应的方法<br>①开启事务：void setAutoCommit(boolean autoCommit) &#x2F;&#x2F;true为自动提交事务；false为手动提交事务，即为开启事务<br>②提交事务：void commit()<br>③回滚事务：void rollback() &#x2F;&#x2F;try catch</p><p>Statement：执行SQL语句<br>int executeUpdate(String sql)：执行DML（对表中数据进行增删改）返回值为DML影响的行数，DDL（操作数据库，表）语句<br>ResultSet executeQuery(String sql)：执行DQL（对数据进行查询）语句</p><p>ResultSet结果集对象：封装了DQL查询语句的结果<br>boolean next()：将光标从当前位置向前移动一行，判断当前行是否为有效行，true ： 有效行，当前行有数据  false ： 无效行，当前行没有数据<br>xxx getXxx(参数)：获取数据 xxx : 数据类型；<br>例：int getInt(参数)    String getString(参数)    参数类型为int，代表第几列(从1开始)    参数类型为String，代表列的名称<br>例：String name &#x3D; rs.getString(2)：获取该行第二列的字符串</p><p>SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法。</p><p>PreparedStatement：<br>①预编译SQL语句并执行，性能更高<br>②预防SQL注入，将敏感字符进行转义<br>在url后面加上useServerPrepStmts &#x3D; true 参数开启预编译功能<br>流程：<br>①获取获取 PreparedStatement 对象<br>&#x2F;&#x2F; SQL语句中的参数值，使用?占位符替代<br>String sql &#x3D; “select * from user where username &#x3D; ? and password &#x3D; ?”;<br>&#x2F;&#x2F; 通过Connection对象获取，并传入对应的sql语句<br>PreparedStatement pstmt &#x3D; conn.prepareStatement(sql)<br>②设置?参数值<br>PreparedStatement对象：setXxx(参数1，参数2)：给 ? 赋 值<br>Xxx：数据类型 ； 如 setInt (参数1，参数2)<br>参数1： ？的位置编号，从1 开始<br>参数2： ？的值<br>③执行SQL语句                                               &#x2F;&#x2F;调用这两个方法时不需要传递SQL语句，因为获取SQL语句执行对象时已经对SQL语句进行预编译了。<br>executeUpdate(); 执行DDL语句和DML语句<br>executeQuery(); 执行DQL语句</p><p>数据库连接池：数据库连接池是个容器，负责分配、管理数据库连接<br>优点：资源重用，提升系统响应速度，避免数据库连接遗漏</p><p>DataSource：数据库连接池标准接口<br>该接口提供了获取连接的功能：Connection getConnection()<br>常见的数据库连接池：DBCP，C3P0，Druid（常用）</p><p>System.out.println(System.getProperty(“user.dir”)) ：找到当前绝对路径</p><p>Maven：是专门用于管理和构建Java项目的工具<br>①提供了一套标准化的项目结构<br>②提供了一套标准化的构建流程（编译，测试，打包，发布……）<br>③提供了一套依赖管理机制<br>常用命令：<br>compile ：编译<br>clean：清理<br>test：测试<br>package：打包<br>install：安装jar包到仓库</p><p>Maven 中的坐标是资源的唯一标识，使用坐标来定义项目或引入项目中需要的依赖<br>Maven 坐标主要组成：<br>①groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）<br>②artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）<br>③version：定义当前项目版本号</p><p>创建maven项目一定要先配置maven仓库</p><p>Maven项目导入：导入pom文件即可<br>导入jar包：<dependencies> → <dependency>        如果报错右上角下载<br>想要移除jar包或者添加jar包，要右上角刷新后才能生效<br>alt + insert：选择dependcy快速搜索已经下载的jar包</p><p>依赖范围：依赖通过 scope 标签指定依赖的作用范围<br>①compile ：作用于编译环境、测试环境、运行环境<br>②test ： 作用于测试环境。典型的就是Junit坐标，以后使用Junit时，都会将scope指定为该值<br>③provided ：作用于编译环境、测试环境。我们后面会学习 servlet-api ，在使用它时，必须将 scope 设置为该值，不然运行时就会报错<br>④runtime ： 作用于测试环境、运行环境。jdbc驱动一般将 scope 设置为该值，当然不设置也没有任何问题<br>如果引入坐标不指定 scope 标签时，默认就是 compile 值。以后大部分jar包都是使用默认值。</p><p>Mybatis：MyBatis 是一款优秀的持久层框架，用于简化 JDBC 开发<br>持久层：负责将数据到保存到数据库的那一层代码。</p><p>调用Mybatis完成sql语句：<br>①获取SqlSessionFactory对象<br>②获取SqlSession对象<br>③获取Mapper<br>④调用方法<br>⑤释放资源</p><p>创建SqlSessionFactoryUtils工具类：<br>①定义SqlSessionFactory sqlSessionFactory成员变量<br>②用静态代码块的形式存放这三行代码，这样sql工厂的创建只随着类的加载自动创建一次，且只执行一次<br>String resource &#x3D; “mybatis-config.xml”;<br>InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);<br>sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);<br>③在方法中返回sql工厂对象</p><p>Mapper代理开发：<br>①定义返回值对象类，如User类<br>②定义与SQL映射文件同名的Mapper接口（如UserMapper），并将Mapper接口与SQL映射文件(UserMapper.xml)放置在同一目录<br>在resource文件下新建一个com&#x2F;zxp&#x2F;mapper，把SQL映射文件放进去，这样SQL映射文件就和Mapper在同一个目录下<br>③设置SQL映射文件的namespace属性为Mapper接口全限定名，namespace &#x3D; com.zxp.mapper.UserMapper<br>④在Mapper接口中定义方法，方法名就是SQL映射文件sql语句的id，并保持参数类型和返回值类型一致<br>⑤在mybatis-config中重新加载sql映射文件，把原来的mapper resource替换成<package name = "com.zxp.mapper"/>，把所有映射文件的目录传进去<br>⑥主体代码（见文件）</p><p>可以在sql映射文件中给字段进行映射：在sql文件中<resultMap>,id为唯一标识，type为类所在位置。<br>在内部，id为主键字段，result为一般字段映射，column为表的列名，property为实体类的属性名<br><result column="brand_name" property="brandName"/><br>然后把下边的resultType换成resultMap &#x3D; 前边定义的唯一标识</p><p>参数占位符：<br>#{ }：将sql语句中对应位置替换为?，为了防止sql注入，里边最好填对应参数的名称<br>￥{ }：拼sql，会存在sql注入问题</p><p>特殊字符处理：<br>转义字符：小于：”&lt;”   大于：”&gt;”<br>CDATA区：输入CD在里边写符号</p><p>多条件查询：(like后的%在service中拼接)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand</span><br><span class="line">        where status = #&#123;status&#125;</span><br><span class="line">          and company_name like #&#123;companyName&#125;</span><br><span class="line">          and brand_name like #&#123;brandName&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>①List<Brand> selectByCondition(@Param(“status”)int status,@Param(“companyName”) String companyName,@Param(“brandName”) String brandName);&#x2F;&#x2F;括号里的名称与参数占位符里的名称一致<br>给参数加上注释，注释的名称应该与占位参数名称一致<br>②List<Brand> selectByCondition(Brand brand);<br>把参数封装成一个对象，把参数传给该对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">       from tb_brand</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">               and status = #&#123;brand.status&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">               and company_name like #&#123;brand.companyName&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">               and brand_name like #&#123;brand.brandName&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③List<Brand> selectByCondition(Map map);<br>把参数名称和参数传递到哈希表中，把map对象传给方法</p><p>动态sql查询：<br>①if：注意test后边的参数名要和你传入的参数名一致，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and company_name like #&#123;companyName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and brand_name like #&#123;brandName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②加上where标签可以防止and字符报错<br>③choose（when,otherwise）：选择，类似于switch语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">   brand_name like #&#123;brandName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span> 1=1 <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span><span class="comment">&lt;!--可以把otherwise替换成when标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用java进行sql添加功能时</strong><br>①要手动提交事务sqlSession.commit<br>②SqlSession sqlSession &#x3D; sqlSessionFactory.openSession(true);打开自动提交（关闭事务）<br>③<insert id="add" useGeneratedKeys="true" keyProperty="id">&#x2F;&#x2F;这样添加的信息就可以访问主键了</p><p>批量删除sql：参数加@Param注释，否则collection默认应该为array，separator为连接符，open&#x3D;”(“：开始拼一个（</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">        delete from tb_brand where id</span><br><span class="line">        in(<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> );</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>W3C标准：网页主要由结构：HTML，表现：CSS，行为：JavaScript</p><p>JavaScript</p><p>JavaScript 引入方式（HTML 和 JavaScript 的结合方式）有两种：</p><p>内部脚本：将 JS代码定义在HTML页面中<br>①在 HTML 中，JavaScript 代码必须位于 <script> 与 </script> 标签之间<br>②一般把脚本置于元素的底部，可改善显示速度因为浏览器在加载页面的时候会从上往下进行加载并解析。 我们应该让用户看到页面内容，然后再展示动态的效果</p><p>外部脚本：将 JS代码定义在外部 JS文件中，然后引入到 HTML页面中<br>①定义外部 js 文件，如定义名为 demo.js的文件<br>②在页面中引入外部的js文件<br>③在页面使用 script 标签中使用 src 属性指定 js 文件的 URL 路径。<br>④外部脚本不能包含 <script> 标签：在js文件中直接写 js 代码即可，不要在 js文件中写 script 标签<br>⑤<script> 标签不能自闭合，在页面中引入外部js文件时，不能写成 <script src="../js/demo.js" /> 。</p><p>JavaScript书写语法<br>①区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的<br>②每行结尾的分号可有可无<br>③如果一行上写多个语句时，必须加分号用来区分多个语句。<br>④注释：<br>单行注释：// 注释内容<br>多行注释：/* 注释内容 */<br>JavaScript 没有文档注释</p><p>输出语句：<br>①使用 window.alert() 写入警告框<br>②使用 document.write() 写入 HTML 输出<br>③使用 console.log() 写入浏览器控制台</p><p>变量：JavaScript 中用 var 关键字（variable 的缩写）来声明变量。<br>格式 var 变量名 = 数据值<br>JavaScript 是一门弱类型语言，变量可以存放不同类型的值</p><p>var关键字：<br>①作用域：全局变量<br>②变量可以重复定义<br>③let 关键字定义变量,它的用法类似于 var ，但是所声明的变量，只在 let 关键字所在的代码块内有效，且不允许重复声明。<br>④const关键字，用来声明一个只读的常量，一旦声明，常量的值就不能改变。</p><p>数据类型：原始类型和引用类型</p><p>原始数据类型：<br>①number：数字（整数、小数、NaN(Not a Number)）<br>②string：字符、字符串，单双引皆可<br>③boolean：布尔。true，false<br>④null：对象为空<br>⑤undefined：当声明的变量未初始化时，该变量的默认值是 undefined<br>⑥使用typeof运算符可以获取数据类型</p><p>== 和 === 区别：<br>==：</p><ol><li>判断类型是否一样，如果不一样，则进行类型转换</li><li>再去比较其值<br>===：js 中的全等于</li><li>判断类型是否一样，如果不一样，直接返回false</li><li>再去比较其值</li></ol><p>类型转换：</p><p>string 转换为 number 类型：按照字符串的字面值，转为数字。如果字面值不是数字，则转为NaN<br>①使用 + 正号运算符<br>②使用 parseInt() 函数(方法)</p><p>boolean 转换为 number 类型：true 转为1，false转为0</p><p>number 类型转换为 boolean 类型：0和NaN转为false，其他的数字转为true<br>string 类型转换为 boolean 类型：空字符串转为false，其他的字符串转为true<br>null类型转换为 boolean 类型是 false<br>undefined 转换为 boolean 类型是false</p><p>函数：是被设计为执行特定任务的代码块；JavaScript 函数通过 function 关键词进行定义<br>①function 函数名(参数1,参数2..){ 要执行的代码 }<br>②var 函数名 = function (参数列表){ 要执行的代码 }<br>③形式参数不需要类型。因为JavaScript是弱类型语言<br>④返回值也不需要定义类型，可以在函数内部直接使用return返回即可</p><p>JavaScript Array对象用于定义数组:<br>①var 变量名 = new Array(元素列表);<br>②var 变量名 = [元素列表];<br>③JavaScript 中数组的长度是可以变化的， JavaScript 是弱类型，所以可以存储任意类型的数据。</p><p>String：trim方法可以去除字符串的空白部分</p><p>自定义对象：<br>var 对象名称 = {<br>属性名称1:属性值1, 属性名称2:属性值2, ...,<br>函数名称:function (形参列表){},<br>... };</p><p>BOM：Browser Object Model 浏览器对象模型<br>①JavaScript 将浏览器的各个组成部分封装为对象<br>②Window：浏览器窗口对象<br>③Navigator：浏览器对象<br>④Screen：屏幕对象<br>⑤History：历史记录对象<br>⑥Location：地址栏对象</p><p>Window：浏览器窗口对象<br>方法：<br>alert()：显示带有一段消息和一个确认按钮的警告框<br>confirm()：显示带有一段消息一级确认按钮和取消按钮的对话框<br>setInterval(function,毫秒值)：按照指定的周期（以毫秒计）来调用函数或计算表达式<br>setTimeout(function,毫秒值 )：在指定的毫秒数后调用函数或计算表达式</p><p>History：历史记录对象<br>获取：使用window.history.方法()        window可以省略<br>方法：<br>back()：加载history列表中的上一个URL<br>forward()：加载history列表中的下一个URL</p><p>Location：地址栏对象<br>获取：window.location.方法()     window可以省略<br>属性：<br>href：设置或返回完整的URL</p><p>DOM：Document Object Model 文档对象模型。<br>①JavaScript 将 HTML 文档的各个组成部分封装为对象<br>②Document：整个文档对象<br>③Element：元素对象<br>④Attribute：属性对象<br>⑤Text：文本对象<br>⑥Comment：注释对象<br>作用：<br>①JavaScript 通过 DOM， 就能够对 HTML进行操作了<br>②改变 HTML 元素的内容<br>③改变 HTML 元素的样式（CSS） 对 HTML DOM 事件作出反应<br>④添加和删除 HTML 元素</p><p>Element：HTML 中的 Element 对象可以通过 Document 对象获取，而 Document 对象是通过 window 对象获取。<br>Document 对象中提供了以下获取 Element 元素对象的函数：<br>getElementById() ：根据id属性值获取，返回单个Element对象<br>getElementsByTagName() ：根据标签名称获取，返回Element对象数组<br>getElementsByName() ：根据name属性值获取，返回Element对象数组<br>getElementsByClassName() ：根据class属性值获取，返回Element对象数组<br>style：设置元素css样式<br>innerHTML：设置元素内容<br>checked：使所有的复选框呈现被选中的状态</p><p>事件：是发生在 HTML 元素上的“事情，比如：页面上的按钮被点击，鼠标移动到元素之上 ，按下键盘按键 等都是事件<br>事件监听：是JavaScript 可以在事件被侦测到时执行一段逻辑代码</p><p>事件绑定<br>①通过 HTML标签中的事件属性进行绑定<br><input type="button" onclick='on()'><br>function on(){ alert("我被点了"); }<br>②通过 DOM 元素属性绑定<br><input type="button" id="btn"><br>document.getElementById("btn").onclick = function (){ alert("我被点了"); }</p><p>常见事件：<br>onclick 鼠标单击事件<br>onblur 元素失去焦点<br>onfocus 元素获得焦点<br>onload 某个页面或图像被完成加载<br>onsubmit 当表单提交时触发该事件<br>onmouseover 鼠标被移到某元素之上<br>onmouseout 鼠标从某元素移开</p><p>正则表达式：<br>^：表示开始<br>$：表示结束<br>[ ]：代表某个范围内的单个字符，比如： [0-9] 单个数字字符<br>.：代表任意单个字符，除了换行和行结束符<br>\w：代表单词字符：字母、数字、下划线()，相当于 [A-Za-z0-9]<br>\d：代表数字字符： 相当于 [0-9]<br>量词：<br>+：至少一个<br>*：零个或多个<br>？：零个或一个<br>{x}：x个<br>{m,}：至少m个<br>{m,n}：至少m个，最多n个</p><p>正则对象创建方式：<br>直接量方式：var reg = /正则表达式/                 /^\w{6,12}$/<br>创建 RegExp 对象：var reg = new RegExp("正则表达式")</p><p>HTTP：超文本传输协议，规定了浏览器和服务器之间数据传输的规则<br>特点：<br>①基于TCP协议：面向连接，安全<br>②基于请求-响应模型的：一次请求对应一次响应，  请求和响应是一 一对应关系<br>③HTTP协议是无状态协议：对于事物处理没有记忆能力，每次请求-响应都是独立的<br>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息，这种特性有优点也有缺点<br>优点：速度快<br>缺点：多次请求间不能共享数据</p><p>HTTP请求数据格式：</p><p>请求行：请求数据的第一行，包含三部分，请求方式，请求URL路径，HTTP协议及版本<br>①请求方式<br>②/表示请求资源路径<br>③HTTP/1.1表示协议版本</p><p>请求头：第二行开始，格式为key: value形式<br>常见的请求头<br>①Host: 表示请求的主机名<br>②User-Agent: 浏览器版本,例如Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko；<br>③Accept：表示浏览器能接收的资源类型，如text/*，image/<em>或者</em>/*表示所有；<br>④Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；<br>⑤Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</p><p>请求体（和请求头之间空一行）：POST请求的最后一行，存放请求参数</p><p>GET和POST请求之间的区别：<br>①GET请求请求参数在请求行中，没有请求体，POST请求请求参数在请求体中<br>②GET请求请求参数大小有限制，POST没有</p><p>HTTP响应数据格式：</p><p>响应行：响应数据的第一行，响应行包含三块内容，HTTP协议及版本，响应状态码，状态码的描述<br>①HTTP/1.1[HTTP协议及版本]<br>②200[响应状态码]<br>③ok[状态码的描述]</p><p>响应头：第二行开始，格式为key：value<br>HTTP常见响应头<br>①Content-Type：表示该响应内容的类型，例如text/html，image/jpeg；<br>②Content-Length：表示该响应内容的长度（字节数）；<br>③Content-Encoding：表示该响应压缩算法，例如gzip；<br>④Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒</p><p>响应体：最后一部分，存放响应数据</p><p>状态码分类：<br>1xx：响应中，表示请求已经接受，告诉客户端应该继续请求或者如果已经完成则忽略他<br>2xx：成功，表示请求已经被成功接受，处理已完成<br>3xx：重定向，重定向到其他地方：它让客户端再发送一个请求以完成整个处理<br>4xx：客户端错误，处理发生错误，责任在客户端，如：客户端请求一个不存在的资源，客户端未被授权，禁止访问等<br>5xx：服务器端错误，处理发生错误，责任在服务器，如服务器抛出异常，路由错误，HTTP版本不支持等</p><p>Tomcat部署项目：将项目放置到webapps目录下，即部署完成，一般项目会被打成war包，放在webapps目录下会被自动解压</p><p>Maven Web项目结构：<br>webapp：Web项目特有目录<br>webapp子目录：<br>①html：HTML文件目录（可自定义）<br>②WEB-INF：Web项目核心目录（必须叫这个名字）<br>WEB-INF子文件：web.xml（Web项目配置文件）</p><p>Servlet：Java提供的一门动态web资源开发技术，是JavaEE规范之一，也就是接口</p><p>Servlet快速入门<br>①创建web项目，导入Servlet依赖坐标<br>②创建一个类，实现Servlet接口，重写所有方法，并在service方法中输入一句话<br>③配置:在类上使用@WebServlet注解（属性名称为value且只有一个属性时，value可以省略），配置该Servlet的访问路径<br>④访问:启动Tomcat,浏览器中输入URL地址访问该Servlet<br>⑤访问后，在控制台会打印service方法的话，说明servlet程序已经成功运行。</p><p>Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段：<br>①加载和实例化：默认情况下（当配置loadOnStartup(默认为负整数)= 0或正整数时，服务器启动时创建Servlet对象，数字越小优先级越高），当Servlet第一次被访问时，由容器创建Servlet对象<br>②初始化：在Servlet实例化之后，容器将调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作，该方法只调用一次<br>③请求处理：每次请求Servlet时，Servlet容器都会调用Servlet的service()方法对请求进行处理<br>④服务终止：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</p><p>urlPattern配置：Servlet类访问路径（@WebServlet(urlPatterns = {"/demo7","/demo8"})）<br>①一个Servlet可以配置多个访问路径<br>②精确匹配：@WebServlet(urlPatterns = "/user/select")<br>③目录匹配：@WebServlet(urlPatterns = "/user/*")<br>③扩展名匹配：@WebServlet(urlPatterns = "  * . do   ")<br>④任意匹配（不要使用）：@WebServlet(“/”）或@WebServlet(“/*”）</p><p>Request的继承体系：<br>ServletRequest：Java提供的请求对象根接口<br>HttpServletRequest：Java提供的对Http协议封装的请求对象接口<br>RequestFacade：Tomcat定义的实现类</p><p>HttpServletRequest：Java提供的对Http协议封装的请求对象接口：<br>请求行：<br>String getMethod()：获取请求方式: GET<br>String getContextPath()：获取虚拟目录(项目访问路径): /request-demo<br>StringBuffer getRequestURL()：获取URL(统一资源定位符): <a href="http://localhost:8080/request-demo/req1">http://localhost:8080/request-demo/req1</a><br>String getRequestURI()：获取URI(统一资源标识符): /request-demo/req1<br>String getQueryString()：获取请求参数(GET方式): username=zhangsan&password=123</p><p>请求头：<br>String getHeader(String name)：根据请求头名称获取对应值的方法</p><p>请求体（post方法）<br>ServletInputStream getInputStream()：取字节输入流，如果前端发送的是字节数据，比如传递的是文件数据，则使用该方法<br>BufferedReader getReader()：获取字符输入流，如果前端发送的是纯文本数据，则使用该方法（不需要手动关闭）</p><p>Request将获取请求参数的方法进行了封装：<br>Map<String,String[]> getParameterMap()：获取所有参数Map集合<br>String[] getParameterValues(String name)：根据名称获取参数值（数组）<br>String getParameter(String name)：根据名称获取参数值(单个值)</p><p>post解决中文乱码问题：<br>setCharacterEncoding("UTF-8")：设置字符输入流的编码</p><p>get解决中文乱码问题：<br>byte[] bytes = username.getBytes(StandardCharsets.ISO_8859_1);<br>username = new String(bytes,StandardCharsets.UTF_8)</p><p>Request请求转发：<br>request.getRequsetDispatcher("path").forward(request,response)：请求转发<br>void setAttribute(String name,Object o)：存储数据到request域<br>Object getAttribute(String name)：根据key获取值<br>void removeAttribute(String name)：根据key删除该键值对</p><p>Response:设置响应数据</p><p>Reponse的继承体系：<br>ServletReponse：Java提供的请求对象根接口<br>HttpServletReponse：Java提供的对Http协议封装的请求对象接口<br>RequestReponse：Tomcat定义的实现类</p><p>响应行：<br>void setStatus(int sc)：设置响应状态码<br>响应头：<br>void setHeader(String name,String value)：设置响应头键值对<br>响应体：<br>PrintWriter getWriter()：获取字符输出流<br>ServletOutputStream getOutputStream()：获取字节输出流</p><p>Response完成重定向：<br>①response.setStatus(302)：设置响应状态码302<br>②response.setHeader("location","资源B的访问路径")<br>简化方式完成重定向：response.sendRedirect("location","资源B的访问路径")</p><p>重定向的特点:<br>①浏览器地址栏路径发送变化<br>②可以重定向到任何位置的资源(服务内容、外部均可)<br>③两次请求，不能在多个资源使用request共享数据</p><p>①请求转发的特点<br>②浏览器地址栏路径不发生变化<br>③只能转发到当前服务器的内部资源<br>④一次请求，可以在转发资源间使用request共享数据</p><p>Response响应字符数据<br>①PrintWriter writer = resp.getWriter()<br>②response.setHeader("content-type","text/html")    //以html文本的形式响应<br>③writer.write("<h1>aaa</h1>")</p><p>响应数据包含中文时：<br>①response.setContentType（"text/html"；"charset=utf-8"）<br>②PrintWriter writer = resp.getWriter()<br>③writer.write("")</p><p>Response响应字节数据：<br>①通过Response对象获取字节输出流：ServletOutputStream outputStream = resp.getOutputStream()<br>②通过字节输出流写数据: outputStream.write(字节数据)</p><p>路径问题：<br>浏览器使用：需要加虚拟目录(项目访问路径)<br>服务端使用：不需要加虚拟目录</p><p>Cookie：客户端会话技术，将数据保存到客户端（浏览器），以后每次请求都携带Cookie数据进行访问。</p><p>发送Cookie<br>①创建Cookie对象，并设置数据<br>Cookie cookie = new Cookie("key","value");<br>②发送Cookie到客户端：使用response对象<br>response.addCookie(cookie)</p><p>获取Cookie<br>①获取客户端携带的所有Cookie，使用request对象<br>Cookie[] cookies = request.getCookies();<br>②遍历数组，获取每一个Cookie对象：for each<br>③使用Cookie对象方法获取数据<br>cookie.getName();<br>cookie.getValue();</p><p>Cookie的原理：Cookie的实现原理是基于HTTP协议的<br>发送Cookie：响应头：set-cookie<br>获取Cookie：请求头: cookie</p><p>Cookie的存活时间：<br>①默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁<br>②setMaxAge(int seconds)：设置Cookie存活时间<br>正数：将Cookie写入浏览器所在电脑的硬盘，持久化存储。到时间自动删除<br>负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁<br>零：删除对应Cookie</p><p>Cookie存储中文：<br>①String value = "张三"；<br>②对中文进行URL编码：对中文进行URL编码  value = URLEncoder.encode(value, "UTF-8");<br>③将编码后的值存入Cookie中：Cookie cookie = new Cookie("username",value);<br>④获取Cookie数组：Cookie[] cookies = request.getCookies();<br>⑤String value = cookie.getValue()；<br>⑥URL解码 value = URLDecoder.decode(value,"UTF-8");</p><p>Session：服务端会话跟踪技术：将数据保存到服务端</p><p>Session的基本使用：获取Session对象,使用的是HttpServletRequest对象：HttpSession session = request.getSession();<br>Session对象提供的功能:<br>①void setAttribute(String name, Object o)：存储数据到 session 域中<br>②Object getAttribute(String name)：根据 key，获取值<br>③void removeAttribute(String name)：根据 key，删除该键值对</p><p>Session的原理：Session是基于Cookie实现的</p><p>Session钝化与活化<br>钝化：在服务器正常关闭后，Tomcat会自动将Session数据写入硬盘的文件中<br>活化：再次启动服务器后，从文件中加载数据到Session中</p><p>session的销毁会有两种方式:<br>①默认情况下，无操作，30分钟自动销毁<br>在web.xml中配置销毁时间，单位为分钟<br><session-config> <session-timeout>100</session-timeout> </session-config><br>②调用Session对象的invalidate()进行销毁</p><p>Cookie和Session区别<br>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端<br>安全性：Cookie不安全，Session安全<br>数据大小：Cookie最大3KB，Session无大小限制<br>存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟<br>服务器性能：Cookie不占服务器资源，Session占用服务器资源</p><p>MavenWeb项目创建：<br>①新建Maven模块，创建时选择maven-archetype-webapp<br>②选择maven对应的文件夹和仓库<br>③把poml文件按照电脑里的修改<br>④新建java和resource文件夹</p><p>Filter 表示过滤器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一<br>①过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能<br>②过滤器一般完成一些通用的操作<br>③实现权限控制</p><p>Filter开发步骤：<br>①定义类，实现 Filter接口，并重写其所有方法<br>②配置Filter拦截资源的路径：在类上定义 @WebFilter 注解。而注解的 value 属性值 /* 表示拦截所有的资源<br>③在doFilter方法中输出一句话，并放行</p><p>Filter执行流程:<br>①执行放行前逻辑（对request数据进行处理）<br>②放行<br>③访问资源<br>④执行放行后逻辑（对response数据进行处理）</p><p>Filter拦截路径配置：<br>①拦截具体的资源：/index.jsp：只有访问index.jsp时才会被拦截<br>②目录拦截：/user/<em>：访问/user下的所有资源，都会被拦截<br>③后缀名拦截：</em>.jsp：访问后缀名为jsp的资源，都会被拦截<br>④拦截所有：/*：访问所有资源，都会被拦截</p><p>Listener 表示监听器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一<br>①监听器是在 application ， session ， request 三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件<br>②application 是 ServletContext 类型的对象<br>③ServletContext 代表整个web应用，在服务器启动的时候，tomcat会自动创建该对象。在服务器关闭时会自动销毁该对象<br>使用方法：<br>①定义类，实现接口<br>②在类上添加@WebListener注解</p><p>AJAX：异步的 JavaScript 和 XML<br>①与服务器进行数据交换：通过AJAX可以给服务器发送请求，服务器将数据直接响应回给浏览器<br>②使用AJAX和服务器进行通信，以达到使用 HTML+AJAX来替换JSP页面<br>③异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如：搜索联想、用户名是否可用校验</p><p>Axios：对原生的AJAX进行封装，简化书写<br>①导入js文件并在html中引入：<script src="js/axios-0.18.0.js"></script> 1<br>②发送 get 请求<br>axios({<br>method:”get”,<br>url:”<a href="http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;">http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;</a><br>}).then(function (resp){<br>alert(resp.data); })<br>②发送 post 请求<br>axios({<br>method:”post”,<br>url:”<a href="http://localhost:8080/ajax-demo1/aJAXDemo1&quot;">http://localhost:8080/ajax-demo1/aJAXDemo1&quot;</a>,<br>data:”username&#x3D;zhangsan”<br>}).then(function (resp){<br>alert(resp.data); });</p><p>method 属性：用来设置请求方式的。取值为 get 或者 post<br>url 属性：用来书写请求的资源路径。如果是 get 请求，需要将请求参数拼接到路径的后面，格式为： url?参数名&#x3D;参 数值&amp;参数名2&#x3D;参数值2<br>data 属性：作为请求体被发送的数据。也就是说如果是 post 请求的话，数据需要作为 data 属性的值。<br>then() 需要传递一个匿名函数。我们将 then() 中传递的匿名函数称为 回调函数，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。<br>该回调函数中的 resp 参数是对响应的数据进行封装的对象，通过 resp.data 可以获取到响应的数据</p><p>axios.get(“<a href="http://localhost:8080/ajax-demo/axiosServlet?username=zhangsan&quot;">http://localhost:8080/ajax-demo/axiosServlet?username=zhangsan&quot;</a>)<br>.then(function (resp) {<br>alert(resp.data); });</p><p>axios.post(“<a href="http://localhost:8080/ajax-demo/axiosServlet&quot;,&quot;username=zhangsan&quot;">http://localhost:8080/ajax-demo/axiosServlet&quot;,&quot;username=zhangsan&quot;</a>)<br>.then(function (resp) {<br>alert(resp.data); })</p><p>JSON：JavaScript Object Notation，JavaScript 对象表示法<br>作用：由于其语法格式简单，层次结构鲜明，现多用于作为数据载体，在网络中进行数据传输。<br>格式：var 变量名 &#x3D; {“key”:value,”key”:value,…};<br>JSON 串的键要求必须使用双引号括起来，而值根据要表示的类型确定。</p><p>value 的数据类型分为如下:<br>数字（整数或浮点数）<br>字符串（使用双引号括起来）<br>逻辑值（true或者false）<br>数组（在方括号中）[]<br>对象（在花括号中）{}<br>null</p><p>Fastjson 可以实现 Java 对象和 JSON 字符串的相互转换。<br>①导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">②Java对象转JSON：String jsonStr = JSON.toJSONString(user)</span><br><span class="line">③JSON字符串转Java对象：User user = JSON.parseObject(jsonStr, User.class)</span><br></pre></td></tr></table></figure><p>Vue 是一套前端框架，免除原生JavaScript中的DOM操作，简化书写。<br>①新建 HTML 页面，引入Vue.js文件：<script src="js/vue.js"></script><br>②在JS代码区域，创建Vue核心对象，进行数据绑定<br>new Vue({<br>el: “#app”,<br>data() {<br>return {<br>username: “” &#x2F;&#x2F;模型数据<br>} } });<br>el：用来指定哪儿些标签受 Vue 管理。 该属性取值 #app 中的 app 需要是受管理的标签的id属性值<br>data：用来定义数据模型<br>methods：用来定义函数。这个我们在后面就会用到<br>③编写视图（报错时考虑将③放在②上边）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> &gt;</span> </span><br><span class="line">&#123;&#123;username&#125;&#125;     //&#123;&#123;&#125;&#125; 是 Vue 中定义的插值表达式 ，在里面写数据模型，到时候会将该模型的数据值展示在这个位置。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue 指令：<br>v-bind：为HTML标签绑定属性值，如设置 href , css样式等<br>v-model：在表单元素上创建双向数据绑定<br>v-on：为HTML标签绑定事件<br>v-if：条件性的渲染某元素，判定为true时渲染,否则不渲染<br>v-else：条件性的渲染某元素，判定为true时渲染,否则不渲染<br>v-else-if：条件性的渲染某元素，判定为true时渲染,否则不渲染<br>v-show：根据条件展示某元素，区别在于切换的是display属性的值<br>v-for：列表渲染，遍历容器的元素或者对象的属性</p><p>Vue生命周期的八个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也被称为钩子方法。<br>beforeCreate：创建前<br>created：创建后<br>beforeMount：载入前<br>mounted：挂载完成<br>beforeUpdate：更新前<br>updated：更新后<br>beforeDestory：销毁前<br>destoryed：销毁后</p><p>mounted：挂载完成，Vue初始化成功，HTML页面渲染成功<br>new Vue({<br>el:”#app”,<br>mouted(){<br>alert(“vue挂载完成，发送异步请求”);<br>}});</p><p>Element：是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页。<br>①将element-ui文件夹拷贝到webapp目录下<br>②创建页面，并在页面引入Element 的css、js文件 和 Vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③创建Vue核心对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span> &#125;) </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css样式放在<head>标签中</p><p>Layout 局部：通过基础的 24 分栏，迅速简便地创建布局。也就是默认将一行分为 24 栏，根据页面要求给每一列设置所占的栏数。<br>Container 布局容器：用于布局的容器组件，方便快速搭建页面的基本结构。如下图就是布局容器效果。</p><p>Maven依赖管理：<br>如果一个项目一要用到项目二的资源，把项目二的坐标复制后，以denpendency的方式添加到项目一：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>login-register<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不想用项目二的某个资源可以使用排除依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>login-register<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><optional>true</optional>：对外隐藏该资源</p><p>依赖范围：依赖通过 scope 标签指定依赖的作用范围<br>①compile ：作用于编译环境、测试环境、运行环境<br>②test ： 作用于测试环境。典型的就是Junit坐标，以后使用Junit时，都会将scope指定为该值<br>③provided ：作用于编译环境、测试环境。我们后面会学习 servlet-api ，在使用它时，必须将 scope 设置为该值，不然运行时就会报错<br>④runtime ： 作用于测试环境、运行环境。jdbc驱动一般将 scope 设置为该值，当然不设置也没有任何问题<br>如果引入坐标不指定 scope 标签时，默认就是 compile 值。以后大部分jar包都是使用默认值。</p><p>Maven插件：<br>①插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能<br>②默认maven在各个生命周期上绑定有预设的功能<br>③通过插件可以自定义其他功能</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE笔记</title>
      <link href="/2022/05/10/JavaSE/"/>
      <url>/2022/05/10/JavaSE/</url>
      
        <content type="html"><![CDATA[<p>进制：97<br>二进制 ：01100001 (0B&#x2F;0b开头)<br>八进制：01 100 001  → 141（0开头）<br>十六进制：0110 0001 → 61 最大为15 A-F &#x3D; 10 - 15 （0X&#x2F;0x开头）</p><p>类型转换：byte、short、char在表达式中直接转换成int来计算<br>表达式最终结果由表达式中最高类型决定：byte、short、char→int→long→float→double</p><p>逻辑运算符：&amp;一个假就是假；|一个真就是真；！你真我假你假我真；^结果不同为真;&amp;&amp;左边是假右边不执行；||左边是真右边不执行</p><p>三元运算符：条件表达式？值1：值2；条件表达式为真返回值1，假返回值2</p><p>不知道循环多少次用while;知道循环多少次用for</p><p>方法中数组的值会因为形参改变，因为数组是传递的地址；<br>方法中return后的语句不执行；</p><p>return：跳出并立即结束所在方法的执行；<br>break：跳出并结束当前所在循环的执行；<br>continue：结束当前所在循环的当次，立即进入下次循环；</p><p>字符+字符串，不能算，+作为连接符，连接起来</p><p>类中成员变量默认值规则：<br>byte、short、char、int、long ： 0<br>float、double ： 0.0<br>boolean : false<br>类、接口、数组、String ： null</p><p>int number &#x3D; r.nextInt(2,5)               2 &lt;&#x3D; number &lt; 5</p><p>两个字符串比较，要看字符串是否指向同一个对象。<br>用“”方式给出的字符串对象，在字符串常用池中储存，相同内容只会在其中储存一份，给出的相同字符串指向同一个对象。<br>不是直接用“”给出来的字符串，如通过运算得到的字符串，存放在堆内存中，与直接“”给出来的存放在字符串常用池中的不相等。<br>程序在编译时“a” + “b” + “c”会直接转换成”abc”<br>通过构造器new字符串对象，每new一次产生一个新对象，放在堆内存。</p><p>a.equals(b);             字符串a和b比较</p><p>标准JavaBean须满足的书写要求：<br>①成员变量使用private修饰<br>②提供成员变量对应的set和get方法（右键generate,select none）<br>②必须提供一个无参构造器，有参构造器可写可不写。（右键generate）</p><p>成员变量和局部变量区别：<br>①成员变量存在于类中，局部变量常见于方法中；<br>②成员变量有默认值，局部变量没有默认值；<br>③成员变量属于对象，和对象一起保存在堆内存；局部变量是在方法里面，方法在栈内存执行，因此局部变量也在栈内存；<br>④成员变量随着对象存在和消失，局部变量随着方法调用而存在，随着运行结束而消失；<br>⑤作用域：成员变量对象存在就能访问，局部变量在所属打括号中；</p><p>&#x2F;**+回车 自动标准注释</p><p>String常用方法：<br>public int length（）：返回此字符串的长度<br>public char charAt（int index）：获取索引位置处的字符<br>public char[] toCharArray（）：将当前字符串转换成字符数组返回<br>public String substring（int beginIndex, int endIndex）：根据开始和结束索引进行截取，得到新的字符串（包前不包后）<br>public String substring（int beginIndex）：从开始索引截取到末尾，得到新的字符串<br>public String replace （CharSequence target ,CharSequence replacement）：使用新值，将字符串中的旧值替换，得到新的字符串<br>public String[ ] split （String regex）：根据传入的规则切割字符，得到字符串数组返回</p><p>ctrl + alt + t：快速添加死循环</p><p>alt + enter ：快速生成方法</p><p>静态代码块：有static修饰，属于类，与类一起优先加载一次，仅加载一次，自动触发执行；<br>作用：可以用于初始化静态资源</p><p>构造代码块：无static修饰，属于对象，每次构建对象时，都会触发一次执行，在构造器执行前</p><p>继承：<br>@Override：方法重写校验注解，提高可读性<br>1.重写方法的名字和形参列表必须与被重写方法一样<br>2.私有方法不能被重写；<br>3.静态方法不能被重写；</p><p>子类可以继承父类的属性和行为，但是子类不能继承父类的构造器<br>一个类只能继承一个父类<br>Java不支持多继承但是支持多层继承<br>子类的全部构造器默认会先访问父类的无参数构造器</p><p>this（ ）和super（ ）只能放在构造器第一行，两者不共存<br>this：访问子类当前对象的成员<br>super：在子类方法中指定访问父类的成员<br>this（ ）：访问本类兄弟构造器<br>super（ ）：在本类构造器中指定访问父类的构造器</p><p>private：只有同一个类中可以使用<br>缺省（什么都不加）：同一个包中可以使用<br>protected：同一个类中，同一个包中其他类，不同包下的子类都能用（继承）<br>public：同一个类中，同一个包中其他类，不同包下的子类（继承），不同包下的无关类都能用<br>一般要求：成员变量一般私有；方法一般公开；如果该成员只希望本类访问，使用private修饰；</p><p>final：可以修饰类，方法，变量<br>修饰类：表明该类是最终类，不能被继承<br>修饰方法：表明该类是最终方法，不能被重写<br>修饰变量：表示该变量第一次赋值后，不能被再次赋值（有且仅能被赋值一次）<br>final修饰引用类型的变量，地址值不能改变，但是指向的对象内容可以改变               如：final Teacher t &#x3D; new Teacher(“学习”) ；          t.setHobby(“运动”)；可以这么做</p><p>枚举：为了做信息的标志和信息的分类<br>格式：修饰符 enum 枚举名称{罗列枚举类实例的名称}</p><p>抽象类<br>public abstract class Animal{<br>public abstract void run();<br>}<br>抽象类中可以没有抽象方法，有抽象方法的必须是抽象类<br>一个类继承了抽象类，必须重写完抽象类的全部抽象方法，否则这个类也必须定义为抽象类<br>抽象类不能创建对象<br>作用：通常作为模板类，模板方法通常加final避免被重写<br>final与abstract互斥</p><p>接口<br>public interface 接口名{&#x2F;&#x2F;常量             &#x2F;&#x2F;抽象方法}<br>接口被实现类实现，可以理解为子类：修饰符 class 实现类 implements 接口1，接口2，接口3，…{  }</p><p>一个接口可以继承多个接口<br>接口的方法默认有public abstract修饰<br>接口的默认方法必须用default修饰，默认用public修饰<br>接口的静态方法必须用本身的接口名调用，默认用public修饰<br>接口的私有方法必须用private修饰，只能在本类中被其他默认方法或私有方法访问<br>接口不能定义对象<br>一个类实现多个接口，多个接口中同名静态方法不冲突，因为静态方法只能用接口名调用<br>一个类继承了父类，同时又实现了接口，父类和接口中同名方法，默认用父类的<br>一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可</p><p>多态：同类型的对象，执行同一个行为，会表现出不同的特征<br>形式：父类类型 对象名称 &#x3D; new 子类构造器                   接口  对象名称 &#x3D; new 实现类构造器<br>多态中成员访问特点：方法调用：编译看左，运行看右     变量调用：编译看左，运行也看左<br>定义方法时，使用父类型作为参数，该方法可以接收父类的一切子类对象<br>多态下不能访问子类独有功能，如果要访问必须强制类型转换：子类 对象变量 &#x3D; （子类）父类类型变量<br>Java建议使用instanceof判断当前对象真实类型再进行转换（判断左边对象是否属于右边类）</p><p>静态内部类：有static修饰属于外部类本身，它的特点和使用与普通类完全一样，只是在别人里面<br>创建对象格式：外部类名.内部类名 对象名 &#x3D; new 外部类名。内部构造器</p><p>成员内部类：无static修饰，属于外部类对象<br>创建对象格式：外部类名。内部类名 对象名 &#x3D; new 外部构造器.new 内部构造器<br>成员内部类中访问所在外部类对象格式：外部类名.this</p><p>匿名内部类：本质是没有名字的局部内部类，定义在方法中，代码块中等<br>作用：方便创建子类对象，最终目的为了简化代码编写<br>格式：new 类|抽象类名|接口类名（）{重写方法；}<br>特点：1.匿名内部类是一个没有名字的内部类；<br>2.匿名内部类写出来就会产生一个匿名内部类对象；<br>3.匿名内部类的对象类型相当于是当前new的那个的类型的子类类型</p><p>Objects常见方法：<br>boolean equals（Object a , Object b）：比较两个对象，避免空指针（字符串比较！！！）<br>boolean isNull (Object obj)：判断是否为null，是null返回true<br>Object.equals默认比较地址，比较对象内容需要重写</p><p>StringBuilder（代码）:一个类，用来拼接反转字符串，性能好，toString已经重写。</p><p>Math类：<br>public static int abs（int a）：获取参数绝对值<br>public static double ceil(double a)：向上取整<br>public static double floor(double a)：向下取整<br>public static int round(float a)：四舍五入<br>public static int max（int a , int b）：获取较大值<br>public static double pow（double a , double b）：返回a的b次幂的值 a &#x3D; 2, b &#x3D; 3返回值为8<br>public static double random（）：返回随机值范围：[0.0 , 1.0）</p><p>System类：<br>public static void exit（int status）：填零终止当前运行的Java虚拟机，非零表示异常终止<br>public static long currentTimeMills（）：返回当前系统的时间毫秒值形式（返回1970-1-1 00:00:00 到现在的毫秒值）<br>public static void arraycopy（数据源数组，起始索引，目的地数组，起始索引，拷贝个数）：数组拷贝</p><p>BigDecimal（代码）：解决浮点型运算精度失真的问题<br>public static BigDecimal valueOF(double val)：包装浮点数成为BigDecimal对象</p><p>Date类（代码）：<br>无参构造器：public Date（）：创建一个Date对象，代表的是系统当前此刻日期时间<br>有参构造器：public Date（long time）：把时间毫秒值转为Date日期对象<br>常用方法：public long getTime（）：获取时间对象的毫秒值（返回1970-1-1 00:00:00 到此刻的毫秒值）<br>public void setTime（long time）：设置日期对象的时间为当前毫秒值对应的时间<br>d1.after(d2)：判断d1是否在d2之后<br>d1.before(d2)：判断d1是否在d2之前</p><p>SimpleDateFormat类：<br>1.把Date对象或时间毫秒值格式化为我们喜欢的形式；<br>2.把字符串时间解析成日期对象；<br>无参构造器：使用默认格式<br>有参构造器：使用指定格式：<br>y - 年     M - 月     d - 日     H - 时     m - 分     s - 秒     EEE - 星期几     a - 上午&#x2F;下午<br>2020-11-11 13:27:06  ————— yyyy - MM - dd HH:mm:ss<br>2020-11-11 13:27:06  ————— yyyy年MM月dd日 HH:mm:ss<br>public final String format（Date date）：将日期格式化为日期&#x2F;时间字符串<br>public final String format（Object time）：将时间毫秒值格式化为日期&#x2F;时间字符串<br>public Date parse(String source)：从给定字符串的开始解析文本生成日期对象</p><p>Calendar（抽象类，不能直接创建对象）（代码）：代表了系统此刻日期对应的日历对象<br>创建对象：Calendar rightnow &#x3D; Calendar.getInstance（）；<br>public int get(int field)：取日期中的某个字段信息<br>public void set(int field, int value)：修改日历的某个字段信息<br>public void add(int field, int amount)：为某个字段增加&#x2F;减少指定的值<br>public final Date getTime()：拿到此刻日期对象<br>public long getTimeMillis()：拿到此刻时间毫秒值</p><p>新增日期类(代码)：<br>LocalDate类：public static LocalDate&#x2F;LocalTime&#x2F;LocalDateTime now()：根据当前日期&#x2F;时间&#x2F;日期时间创建对象<br>Instant类：由静态方法now创建对象<br>DateTimeFormat类：解析或格式化日期<br>Period类：计算日期间隔<br>Duration类：计算时间间隔<br>ChronoUnit工具类：用于在单个时间单位内测量一段时间，可以比较所有的时间单位</p><p>包装类：8种基本类型对应的引用类型<br>byte,short,long,char,float,double,boolean首字母大写；int→Integer,char→Character<br>把字符串类型的数值转换为真实的数据类型：Integer.valueOf&#x2F;Double.valueOf(“字符串类型的整数&#x2F;小数”)</p><p>正则表达式：判断是否匹配所给规则<br>public boolean matches (String regex)：判断是否匹配正则表达式<br>\w{6,}：必须是字母，数字，下划线，至少六位<br>手机号验证：1[3-9]\d{9}<br>邮箱验证：[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9]+     &#x2F;&#x2F;+表示至少出现一次<br>public String[] split(String regex)：按照正则表达匹配的内容分割字符串，返回一个字符串数组<br>public String[] replaceAll(String regex, String newStr)：按照正则表达式匹配的内容进行替换</p><p>Arrays类(代码)：数组操作工具类，专门用于操作数组元素<br>常用API：public static String toString(类型[] a)：打印数组内容<br>public static void sort（类型[] a）：对数组进行排序（默认升序排序）<br>public static <T> void sort（类型[] a, Comparator &lt;? super T&gt;c）：使用比较器对象自定义排序<br>public static int binarySearch(int[] a, int key)：二分搜索数组中的数据，存在返回索引，不存在返回-1（数组必须排好序才支持）</p><p>Lambda：简化函数式接口的匿名内部类写法，接口中有且仅有一个抽象方法<br>@FunctionalInterface：加上以后必须是函数式接口，只能有一个抽象方法<br>形式：（匿名内部类被重写方法的形参列表） -&gt; {被重写方法的方法体代码}    Swimming s1 &#x3D; （） -&gt; { System.out.println(“游泳”)；}；<br>省略写法：①参数类型可以不写；②如果只有一个参数，参数类型可以不写，同时省略（）<br>③如果方法体代码只有一行，可以省略大括号不写，同时省略分号；如果是return语句，return必须省略，同时省略分号。</p><p>Collection集合体系(代码)：接口<br>List系列集合：有序，可重复，有索引<br>①ArrayList：基于数组，可以重复，有索引，查询快<br>②LinkedList：可重复，有索引，增删首尾操作快<br>Set系列集合：<br>①HashSet：无序，不重复，无索引 ，增删改查快，基于哈希表<br>②LinkedHashSet：有序，不重复，无索引 ，增删改查快，基于哈希表和双链表<br>③TreeSet：按照大小默认升序排序（红黑树），不重复，无索引，可以进行排序</p><p>Iterator：迭代器是集合的专用遍历方式<br>Iterator<E>  iterator（）：返回集合中的迭代器对象，默认指向当前集合0索引<br>常用方法：boolean hasNext（）：询问当前位置是否有元素存在，存在为true<br>E next（）：获取当前位置的元素，并同时将迭代器对象移向下一个位置</p><p>增强for循环：既可以遍历集合也可以遍历数组<br>格式：for(元素数据类型 变量名：数组或者Collection集合) {  }<br>forEach:iter + ctrl + j</p><p>Lambda表达式遍历集合：default void forEach(Consumer&lt;? super T action):</p><p>数据结构：<br>队列：先进先出，后进后出<br>栈：后进先出，先进后出<br>数组：内存连续区域，查询快，增删慢<br>链表：元素游离，查询慢，首尾操作极快<br>二叉树：只有一个根节点，每个节点不超过两个子节点<br>查找二叉树：小的左边，大的右边，但是可能树很高，性能变差<br>平衡查找二叉树：让树的高度差不大于1，增删改查都提高了<br>红黑树：基于红黑规则实现了自平衡的排序二叉树</p><p>泛型：<br>泛型类：修饰符 class 类名&lt;泛型变量&gt;<br>泛型方法：修饰符&lt;泛型变量&gt; 方法返回值 方法名称(形参列表)<br>泛型接口：修饰符 interface 接口名称 &lt;泛型变量&gt;<br>E，T，K，V定义泛型时使用，？在使用泛型时代表一切类型<br>？：可以在使用泛型的时候代表一切泛型</p><p>可变参数：在形参中接受多个数据、<br>格式：数据类型…参数名称<br>作用：传输参数非常灵活，可以不传参数，可以传输一个或者多个参数，也可以传输一个数组</p><p>Collections工具类：<br>public static <T> boolean addAll(Collection<? super T > c, T...elements)：给集合批量添加元素 ，添加元素必须是T或T的子类public static void shuffle (List<?> list)：打乱list集合的顺序<br>public static <T> void sort（List<T> list）：将集合中元素按照默认规则排序，不能对自定义类型集合排序，除非自定义类型实现了比较规则Comparable接口<br>public static <T> void sort（List<T> list, Comparator&lt;? super T&gt; c）：将集合中元素按照制定规则排序</p><p>Map集合（接口）：双列集合，每个元素包含两个数据，每个元素的格式：key &#x3D; value(键值对元素)<br>Map集合完整格式：{key1 &#x3D; value1, key2 &#x3D; value2, key3 &#x3D; value1, …..}<br>Map集合的键无序，不重复，相同的键会覆盖之前的元素；值不做要求，可以重复的。<br>Map集合的特点由键决定</p><p>HashMap：元素按照键是无序，不重复，无索引的，相同的键会覆盖之前的元素，值不做要求（与Map一致）<br>LinkedHashMap：元素按照键是有序的，不重复，无索引，值不做要求<br>TreeMap：元素按照键是排序，不重复，无索引的，值不做要求</p><p>Map常用API：<br>V put (K key , V value)：添加元素<br>V remove(Object key)： 根据键删除对应元素<br>void clear（）：移除所有键值对元素<br>boolean containsKey(Object key)：判断集合是否包含指定的键<br>boolean containsValue(Object value)：判断集合是否包含指定的值<br>boolean isEmpty（）：判断集合是否为空<br>int size()：集合的长度<br>pubulic V get (Object key)：根据键获取对应的值<br>public Set <K> keySet（）：获取全部键的集合<br>Collection<V> values（）：获取全部值的集合<br>map1.putAll(map2)：把map2的元素全部添加到map1</p><p>(代码)<br>Map遍历1：先拿到集合的全部键，遍历每个键，通过forEach根据键获取对应值<br>Map遍历2：通过调用Map的entrySet方法把Map集合转换成Set集合形式，Set&lt;Map.Entry &lt;String ,Integer&gt; &gt; entries ： ctrl + alt + v自动补全<br>Map遍历3：Lambda</p><p>不可变集合：static<E> List<E> of(E…elements)：创建一个具有指定元素的List集合对象<br>不可变集合：static<E> Set<E> of(E…elements)：创建一个具有指定元素的Set集合对象<br>不可变集合：static&lt;K,V&gt; Map&lt;K,v&gt; of(E…elements)：创建一个具有指定元素的Map集合对象</p><p>Stream(代码)：用于简化集合和数组操作的API<br>forEach：遍历<br>count：统计个数 <br>filter：过滤<br>limit：取前几个元素<br>skip：跳过前几个<br>map：加工方法<br>concat：合并流<br>distinct：去除重复元素</p><p>异常类型：<br>1.数组索引越界异常：ArrayIndexOutOfBoundsException<br>2.空指针异常：NullPointerException<br>3.类型转换异常：ClassCastException<br>4.数字操作异常：ArithmeticException<br>5.数字转换异常：NumberFormaException</p><p>throw：在方法内部直接创建一个异常对象，并从此点抛出<br>throws：用在方法申明上抛出方法内部的异常</p><p>日志<br>日志级别依次是：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR，默认级别是debug<br>作用：用于控制系统中哪些日志级别是可以输出的，只输出级别不低于设定级别的日志信息<br>ALL和OFF分别是打开全部日志信息，及关闭所有日志信息<br>在代码中获取日志对象：<br>public static final Logger LOGGER &#x3D; LoggerFactory.getLogger(“类名”)；</p><p>File类:<br>isDirectory：判断此路径名是否为文件夹<br>isFile：判断此路径名是否为文件<br>exists：判断此路径名是否存在<br>length：返回文件的大小（字节数量）<br>getAbsolutePath：返回文件的绝对路径<br>getPath：返回定义文件对象时的路径<br>getName：返回文件的名称，带后缀<br>lastModified：返回文件的最后修改时间（时间毫秒值）<br>createNewFile：创建一个新的空文件<br>mkdir：只能创建一级文件夹<br>mkdirs：可以创建多级文件夹<br>delate：删除此抽象路径名表示的文件或空文件夹，不进入回收站<br>String[] list ：获取当前目录下的所有“一级文件名称”到一个字符串数组中<br>File[] listFiles：获取当前目录下所有“一级文件对象”到一个文件对象数组中<br>listFiles方法注意事项：<br>当文件不存在时或者代表文件时，返回null<br>当文件对象代表一个空文件夹时，返回一个长度为0的数组<br>当文件对象是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回<br>当文件对象是一个有隐藏文件的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回，包含隐藏文件<br>当没有权限访问该文件夹时，返回null</p><p>字符的编码和解码：<br>中文在UTF-8中以三个字节存储，在GBK中以两个字节存储<br>编码：byte[] getBytes()：使用平台的默认字符集将该String编码为一系列字节，将结果存储到新的字节数组中<br>byte[] getBytes(String charsetName)：使用指定的字符集将该String编码为一系列字节，将结果存储到新的字节数组中<br>解码：String(byte[] bytes)：使用平台的默认字符集解码指定的字节数组来构造新的String<br>解码：String(byte[] bytes, String charsetName)：使用指定的字符集解码指定的字节数组来构造新的String<br>“\r\n”：换行</p><p>字节流：<br>InputStream：字节输入流  → FileInputStream（实现类）<br>pubic FileInputStream(File file)：创建字节输入流管道与源文件对象接通<br>pubic FileInputStream(String pathname)：创建字节输入流管道与源文件路径接通<br>public int read（）：每次读取一个字节返回，如果字节已经没有可读的返回-1<br>public int read（byte[] buffer）：每次读取一个字节数组返回，如果字节已经没有可读的返回-1</p><p>OutputStream：字节输出流 → FileOutPutStream（实现类）<br>public FileOutputStream(File file)：创建一个字节输出流管道通到目标文件对象，若存在原文件，会把原文件数据清空<br>public FileOutputStream(File file，boolean append)：创建一个追加数据的字节输出流管道通到目标文件对象，不会清空原文件<br>public void write(int a)：写一个字节进去<br>public void write(byte[] buffer)：写一个字节数组进去<br>public void write(byte[] buffer，int pos ,  int len)：写一个字节数组的一部分进去<br>写数据必须刷新数据<br>输入输出流用完以后一定要关闭<br>flush（）：刷新流，还可以继续写数据<br>close（）：关闭流，释放资源，关闭前会先刷新，一旦关闭就不能写数据</p><p>try-catch-finally：在异常处理时提供finally块来执行所有清除操作，比如IO流中的释放资源<br>特点：无论代码是否正常结束，被finally控制的语句最终一定会执行，除非JVM退出</p><p>try(定义流对象){可能出现异常的代码；}catch(异常类名 变量名 ){异常的处理代码；}  ：用完自动关闭流对象</p><p>字符流：<br>Reader：字符输入流 → FileReader（实现类）<br>InputStreamReader：转换流<br>Writer：字符输出流 → FileWriter（实现类）<br>OutputStreamWrite：转换流</p><p>缓冲流：缓冲流自带缓冲区，可以提高原始字节流，字符流读写数据性能<br>BufferedInputStream：字节缓冲输入流<br>BufferOutputStream：字节缓冲输出流<br>BufferReader：字符缓冲输入流<br>新增：public String readLine()：读取一行数据返回，无行可读返回null<br>BufferWriter：字符缓冲输出流<br>newline（）：换行功能</p><p>转换流：<br>InputStreamReader：字符输入转换流<br>public InputStreamReader(InputStream is ，String charset)：可以把原始的字节流按照指定编码转换成字符输入流，这样字符流中的字符就不乱码了<br>OutputStreamWrite：字符输出转换流<br>public OutputStreamWriter(OutputStream os，String charset)：可以把原始的字节输出流按照指定编码转换成字符输出流</p><p>打印流：实现方便，高效的打印数据到文件中去<br>PrintStream：<br>public PrintStream（OutputStream os）：打印流直接通向字节输出流管道<br>public PrintStream（File f）：打印流直接通向文件对象<br>public PrintStream（String filepath）：打印流直接通向文件路径<br>public void print（Xxx xx）：打印任意类型出去<br>setOut：把系统打印流改成我们自己的打印流</p><p>PrintWrite：方法和构造器和PrintStream一样</p><p>对象序列化：以内存为基准，把内存中的对象存储到硬盘文件中去，称为对象序列化<br>对象如果要序列化必须实现Serializable序列化接口<br>transient修饰的对象不参序列化<br>序列化的版本号与反序列化的版本号必须一致才不会出错<br>ObjectInputStream：对象字节输入流<br>readObject方法：读入对象<br>ObjectOutputStream：对象字节输出流<br>writeObject方法：写入对象</p><p>Properties：属性集对象，属于map类<br>作用：Properties代表的是一个属性文件，可以把自己对象中的键值对信息存入到一个属性文件中去</p><p>commons-io框架：提供很多有关io操作的类，有主要的两个类FileUtils,IOUtils<br>FileUtils：String readFileToString(File file,String encoding)：读取文件中的数据，返回字符串<br>void copyFile(File srcFile, File destFile)：复制文件<br>void copyDirectoryToDirectory(File srcDir, File destFile)：复制文件夹</p><p>IOUtils：static intcopy(InputStream inputStream, OutputStream outputStream)：复制文件</p><p>多线程的创建：<br>方式一：继承Thread类<br>①定义一个子类MyThread继承线程类java.lang.Thread，重写run方法<br>②创建MyThread类的对象<br>③调用线程对象的start方法启动线程（启动后还是执行run方法）<br>优点：编码简单<br>缺点：线程类已经继承了Thread，无法继承其他类，不利于扩展</p><p>方式二：实现Runnable<br>①定义一个线程任务类MyRunnable实现Runnable接口，重写run方法<br>②创建MyRunnable任务对象<br>③把MyRunnable任务对象交给Thread处理<br>④调用线程对象的start方法启动线程<br>优点：线程任务类只是实现接口，可以继续继承类和实现接口，拓展性强<br>缺点：编程多一层对象包装，如果线程有执行结果是不可以直接返回的</p><p>方式三：实现Callable接口<br>①得到任务对象<br>1.定义类实现Callable接口，重写call方法，封装要做的事情<br>2.用FutureTask把Callable对象封装成线程任务对象。<br>②把线程任务对象交给Thread处理。<br>③调用Thread的start方法启动线程，执行任务<br>④线程执行完毕后、通过FutureTask的get方法去获取任务执行的结果</p><p>Thread类<br>String getName​()：获取当前线程的名称，默认线程名称是Thread-索引<br>void setName​(String name)：将此线程的名称更改为指定的名称，通过构造器也可以设置线程名称<br>public static Thread currentThread()：返回对当前正在执行的线程对象的引用<br>public Thread(String name)：可以为当前线程指定名称<br>public Thread(Runnable target)：封装Runnable对象成为线程对象<br>public Thread(Runnable target ，String name )：封装Runnable对象成为线程对象，并指定线程名称<br>public static void sleep(long time)：让当前线程休眠指定的时间后再继续执行，单位为毫秒。</p><p>线程同步：<br>方法一：同步代码块<br>作用：把出现线程安全问题的核心代码给上锁。<br>原理：每次只能一个线程进入，执行完毕后自动解锁，其他线程才可以进来执行。<br>synchronized(同步锁对象) {    操作共享资源的代码(核心代码)      }            ctrl + alt + t<br>锁对象要求：理论上锁对象只要对于当前同时执行的线程来说是同一个对象即可。<br>对于实例方法建议使用this作为锁对象。<br>对于静态方法建议使用字节码（类名.class）对象作为锁对象。</p><p>方法二：同步方法<br>作用：把出现线程安全问题的核心方法给上锁。<br>原理：每次只能一个线程进入，执行完毕以后自动解锁，其他线程才可以进来执行。<br>修饰符 synchronized 返回值类型 方法名称(形参列表) {操作共享资源的代码}<br>同步方法其实底层也是有隐式锁对象的，只是锁的范围是整个方法代码。<br>如果方法是实例方法：同步方法默认用this作为的锁对象。但是代码要高度面向对象！<br>如果方法是静态方法：同步方法默认用类名.class作为的锁对象。</p><p>方法三：Lock锁<br>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作。<br>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来构建Lock锁对象。<br>public ReentrantLock​()：获得Lock锁的实现类对象<br>void lock()：获得锁<br>void unlock()：释放锁，最好用catch finally释放，防止出现死锁</p><p>线程通信的三个常见方法：<br>void wait​()：当前线程等待，直到另一个线程调用notify() 或 notifyAll()唤醒自己<br>void notify​()：唤醒正在等待对象监视器(锁对象)的单个线程<br>void notifyAll​()：唤醒正在等待对象监视器(锁对象)的所有线程<br>注意：上述方法应该使用当前同步锁对象进行调用</p><p>线程池：线程池就是一个可以复用线程的技术。<br>不使用线程池的问题 ：如果用户每发起一个请求，后台就创建一个新线程来处理，下次新任务来了又要创建新线程，而创建新线程的开销是很大的，这样会严重影响系统的性能。</p><p>ExecutorService：代表线程池的接口<br>得到线程池对象：<br>方式一：使用ExecutorService的实现类ThreadPoolExecutor自创建一个线程池对象<br>ThreadPoolExecutor构造器的参数说明<br>public ThreadPoolExecutor(int corePoolSize,                       &#x2F;&#x2F;参数一：指定线程池的线程数量（核心线程）： 不能小于0<br>int maximumPoolSize,   &#x2F;&#x2F;参数二：指定线程池可支持的最大线程数： 最大数量 &gt;&#x3D; 核心线程数量<br>long keepAliveTime,   &#x2F;&#x2F;参数三：指定临时线程的最大存活时间：不能小于0<br>TimeUnit unit,   &#x2F;&#x2F;参数四：指定存活时间的单位(秒、分、时、天)： 时间单位<br>BlockingQueue<Runnable> workQueue,   &#x2F;&#x2F;参数五：指定任务队列： 不能为null<br>ThreadFactory threadFactory,     &#x2F;&#x2F;参数六：指定用哪个线程工厂创建线程： 不能为null<br>RejectedExecutionHandler handler)    &#x2F;&#x2F;参数七：指定线程忙，任务满的时候，新任务来了怎么办： 不能为null<br>临时线程什么时候创建？     新任务提交时发现核心线程都在忙，任务队列也满了，并且还可以创建临时线程，此时才会创建临时线程。<br>什么时候会开始拒绝任务？  核心线程和临时线程都在忙，任务队列也满了，新的任务过来的时候才会开始任务拒绝。</p><p>ExecutorService的常用方法<br>void execute(Runnable command) ：执行任务&#x2F;命令，没有返回值，一般用来执行 Runnable 任务<br>Future<T> submit(Callable<T> task)：执行任务，返回未来任务对象获取线程结果，一般拿来执行 Callable 任务<br>void shutdown() ：等任务执行完毕后关闭线程池<br>List<Runnable> shutdownNow()：立刻关闭，停止正在执行的任务，并返回队列中未执行的任务<br>新任务拒绝策略：<br>ThreadPoolExecutor.AbortPolicy：丢弃任务并抛出RejectedExecutionException异常。是默认的策略<br>ThreadPoolExecutor.DiscardPolicy：丢弃任务，但是不抛出异常 这是不推荐的做法<br>ThreadPoolExecutor.DiscardOldestPolicy：抛弃队列中等待最久的任务 然后把当前任务加入队列中<br>ThreadPoolExecutor.CallerRunsPolicy由主线程负责调用任务的run()方法从而绕过线程池直接执行</p><p>方式二：使用Executors（线程池的工具类）调用方法返回不同特点的线程池对象<br>public static ExecutorService newCachedThreadPool()：线程数量随着任务增加而增加，如果线程任务执行完毕且空闲了一段时间则会被回收掉。<br>public static ExecutorService newFixedThreadPool​(int nThreads)：创建固定线程数量的线程池，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程替代它。<br>public static ExecutorService newSingleThreadExecutor ()：创建只有一个线程的线程池对象，如果该线程出现异常而结束，那么线程池会补充一个新线程。<br>public static ScheduledExecutorService newScheduledThreadPool​(int corePoolSize)：创建一个线程池，可以实现在给定的延迟后运行任务，或者定期执行任务。<br>存在问题：前两个任务队列可能无限增加，后两个线程数可能无限增加</p><p>定时器：定时器是一种控制任务延时调用，或者周期调用的技术。<br>作用：闹钟、定时邮件发送。<br>实现方式一：Timer<br>public Timer()：创建Timer定时器对象<br>public void schedule​(TimerTask task, long delay, long period)：开启一个定时器，按照计划处理TimerTask任务<br>特点和存在的问题：Timer是单线程，处理多个任务按照顺序执行，存在延时与设置定时器的时间有出入。<br>可能因为其中的某个任务的异常使Timer线程死掉，从而影响后续任务执行。</p><p>实现方式二：ScheduledExecutorService：内部为线程池<br>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)：得到线程池对象<br>public ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, long initialDelay, long period，TimeUnit unit)：周期调度方法<br>优点：基于线程池，某个任务的执行情况不会影响其他定时任务的执行。</p><p>线程的状态：也就是线程从生到死的过程，以及中间经历的各种状态及状态转换。<br>Java总共定义了6种状态：6种状态都定义在Thread类的内部枚举类中。<br>NEW(新建)：线程刚被创建，但是并未启动。<br>Runnable(可运行)：线程已经调用了start()等待CPU调度<br>Blocked(锁阻塞)：线程在执行的时候未竞争到锁对象，则该线程进入Blocked状态；。<br>Waiting(无限等待)：一个线程进入Waiting状态，另一个线程调用notify或者notifyAll方法才能够唤醒<br>Timed Waiting(计时等待)：同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。带有超时参数的常用方法有Thread.sleep 、Object.wait。<br>Teminated(被终止)：因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。<br>sleep方法不会释放锁，时间一到不用抢锁直接运行<br>wait方法会释放锁，时间到或被唤醒需要抢锁</p><p>网络编程三要素：IP地址，端口，协议</p><p>IP地址：设备在网络中的地址，是唯一的标识。<br>IP地址形式：公网地址、和私有地址(局域网使用)。<br>192.168. 开头的就是常见的局域网地址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用。<br>IP常用命令：ipconfig：查看本机IP地址<br>ping IP地址：检查网络是否连通<br>特殊IP地址：本机IP: 127.0.0.1或者localhost：称为回送地址也可称本地回环地址，只会寻找当前所在本机。</p><p>InetAddress类：此类表示Internet协议（IP）地址<br>public static InetAddress getLocalHost()：返回本主机的地址对象<br>public static InetAddress getByName​(String host)：得到指定主机的IP地址对象，参数是域名或者IP地址<br>public String getHostName​()：获取此IP地址的主机名<br>public String getHostAddress​()：返回IP地址字符串<br>public boolean isReachable(int timeout)：在指定毫秒内连通该IP地址对应的主机，连通返回true</p><p>端口：应用程序在设备中唯一的标识。<br>端口号：标识正在计算机设备上运行的进程（程序），被规定为一个 16 位的二进制，范围是 0<del>65535。<br>周知端口：0</del>1023，被预先定义的知名应用占用（如：HTTP占用 80，FTP占用21）<br>注册端口：1024~49151，分配给用户进程或某些应用程序。（如：Tomcat占 用8080，MySQL占用3306）<br>动态端口：49152到65535，之所以称为动态端口，是因为它 一般不固定分配某种进程，而是动态分配。<br>我们自己开发的程序选择注册端口，且一个设备中不能出现两个程序的端口号一样，否则出错。</p><p>协议: 数据在网络中传输的规则，常见的协议有UDP协议和TCP协议。<br>通信协议：连接和通信数据的规则被称为网络通信协议<br>OSI参考模型：世界互联协议标准，全球通信规范，此模型过于理想化，未能在因特网上进行广泛推广。<br>TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：事实上的国际标准。</p><p>传输层的2个常见协议</p><p>TCP：是一种面向连接，安全，可靠的传输数据协议<br>TCP协议特点：三次握手建立连接，四次挥手断开连接<br>①TCP协议，必须双方先建立连接，它是一种面向连接的可靠通信协议。<br>②传输前，采用“三次握手”方式建立连接，所以是可靠的。<br>③在连接中可进行大数据量的传输。<br>④连接、发送数据都需要确认，且传输完毕后，还需释放已建立的连接，通信效率较低。<br>TCP协议通信场景：对信息安全要求较高的场景，例如：文件下载、金融等数据通信。</p><p>客户端Socket类：<br>public Socket(String host , int port)：创建发送端的Socket对象与服务端连接，参数为服务端程序的ip和端口。<br>OutputStream getOutputStream()：获得字节输出流对象<br>InputStream getInputStream()：获得字节输入流对象</p><p>服务端ServerSocket类<br>public ServerSocket(int port)：注册服务端端口<br>public Socket accept()：等待接收客户端的Socket通信连接，连接成功返回Socket对象与客户端建立端到端通信</p><p>UDP：是一种无连接、不可靠传输的协议<br>①UDP是一种无连接、不可靠传输的协议。<br>②将数据源IP、目的地IP和端口封装成数据包，不需要建立连接<br>③每个数据包的大小限制在64KB内<br>④发送不管对方是否准备好，接收方收到也不确认，故是不可靠的<br>⑤可以广播发送 ，发送数据结束时无需释放资源，开销小，速度快。<br>UDP协议通信场景：语音通话，视频会话等。</p><p>DatagramPacket：数据包对象（盘子）<br>public DatagramPacket(byte[] buf, int length, InetAddress address, int port):创建发送端数据包对象<br>buf：要发送的内容，字节数组<br>length：要发送内容的字节长度<br>address：接收端的IP地址对象<br>port：接收端的端口号<br>public DatagramPacket(byte[] buf, int length)：创建接收端的数据包对象<br>buf：用来存储接收的内容<br>length：能够接收内容的长度<br>public int getLength()：获得实际接收到的字节个数</p><p>DatagramSocket：发送端和接收端对象（人）<br>public DatagramSocket()：创建发送端的Socket对象，系统会随机分配一个端口号。<br>public DatagramSocket(int port)：创建接收端的Socket对象并指定端口号<br>public void send(DatagramPacket dp)：发送数据包<br>public void receive(DatagramPacket p)：接收数据包</p><p>单元测试：针对最小的功能单元编写测试代码，Java程序最小的功能单元是方法，因此，单元测试就是针对Java方法的测试，进而检查方法的正确性。</p><p>Junit单元测试框架：<br>①JUnit可以灵活的选择执行哪些测试方法，可以一键执行全部测试方法。<br>②Junit可以生成全部方法的测试报告。<br>③单元测试中的某个方法测试失败了，不会影响其他测试方法的测试。</p><p>过程：<br>①将JUnit的jar包导入到项目中<br>②编写测试方法：该测试方法必须是公共的无参数无返回值的非静态方法。<br>③在测试方法上使用@Test注解：标注该方法是一个测试方法<br>④在测试方法中完成被测试方法的预期正确性测试。<br>⑤选中测试方法，选择“JUnit运行” ，如果测试良好则是绿色；如果测试失败，则是红色<br>Assert.assertEquals（）：进行预期结果的正确性测试</p><p>@Test：测试方法<br>@Before：用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。<br>@After：用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。<br>@BeforeClass：用来静态修饰方法，该方法会在所有测试方法之前只执行一次。<br>@AfterClass：用来静态修饰方法，该方法会在所有测试方法之后只执行一次。</p><p>反射概述：反射是在运行时获取类的字节码文件对象：然后可以解析类中的全部成分<br>①反射是指对于任何一个Class类，在”运行的时候”都可以直接得到这个类全部成分。<br>②在运行时,可以直接得到这个类的构造器对象：Constructor<br>③在运行时,可以直接得到这个类的成员变量对象：Field<br>④在运行时,可以直接得到这个类的成员方法对象：Method<br>⑤这种运行时动态获取类信息以及动态调用类中成分的能力称为Java语言的反射机制。</p><p>反射的第一步都是先得到编译后的Class类对象，然后就可以得到Class的全部成分。<br>获取Class类的对象的三种方式<br>方式一：Class c1 &#x3D; Class.forName(“全类名”);<br>方式二：Class c2 &#x3D; 类名.class<br>方式三：Class c3 &#x3D; 对象.getClass();</p><p>Class类中用于获取构造器的方法<br>getConstructors()：返回所有构造器对象的数组（只能拿public的）<br>getDeclaredConstructors()：返回所有构造器对象的数组，存在就能拿到<br>getConstructor（参数类型.Class ….）：返回单个构造器对象（只能拿public的）<br>getDeclaredConstructor（参数类型.Class ….）：返回单个构造器对象，存在就能拿到</p><p>Class类中用于获取成员变量的方法<br>Field[] getFields()：返回所有成员变量对象的数组（只能拿public的）<br>Field[] getDeclaredFields()：返回所有成员变量对象的数组，存在就能拿到<br>Field getField​(String name)：返回单个成员变量对象（只能拿public的）<br>Field getDeclaredField​(String name)：返回单个成员变量对象，存在就能拿到<br>void set(Object obj, Object value)：赋值<br>Object get(Object obj)：获取值。</p><p>Class类中用于获取成员方法的方法<br>Method[] getMethods()：返回所有成员方法对象的数组（只能拿public的）<br>Method[] getDeclaredMethods()：返回所有成员方法对象的数组，存在就能拿到<br>Method getMethod(String name, Class<?>... parameterTypes) ：返回单个成员方法对象（public）Method getDeclaredMethod(String name, Class<?>… parameterTypes)：返回单个成员方法对象，存在就能拿到<br>Object invoke(Object obj, Object… args)：运行方法<br>参数一：用obj对象调用该方法，如得到Student类的方法，就填Student对象<br>参数二：调用方法的传递的参数（如果没有就不写）<br>返回值：方法的返回值（如果没有就不写）</p><p>自定义注解：<br>public @interface 注解名称 {</p><pre><code>public 属性类型 属性名() default 默认值 ;</code></pre><p>}<br>value属性，如果只有一个value属性的情况下，使用value属性的时候可以省略value名称不写</p><p>元注解：注解注解的注解<br>@Target: 约束自定义注解只能在哪些地方使用，<br>TYPE，类，接口<br>FIELD, 成员变量<br>METHOD, 成员方法<br>PARAMETER, 方法参数<br>CONSTRUCTOR, 构造器<br>LOCAL_VARIABLE, 局部变量<br>@Retention：申明注解的生命周期<br>SOURCE： 注解只作用在源码阶段，生成的字节码文件中不存在<br>CLASS：   注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值.<br>RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）</p><p>注解的解析：<br>注解的操作中经常需要进行解析，注解的解析就是判断是否存在注解，存在注解就解析出内容。<br>Annotation: 注解的顶级接口，注解都是Annotation类型的对象<br>AnnotatedElement：该接口定义了与注解解析相关的解析方法<br>Annotation[] getDeclaredAnnotations()：获得当前对象上使用的所有注解，返回注解数组。<br>T getDeclaredAnnotation(Class<T> annotationClass)：根据注解类型获得对应注解对象<br>boolean isAnnotationPresent(Class<Annotation> annotationClass)：判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false</p><p>解析注解的技巧<br>①注解在哪个成分上，我们就先拿哪个成分对象。<br>②比如注解作用成员方法，则要获得该成员方法对应的Method对象，再来拿上面的注解<br>③比如注解作用在类上，则要该类的Class对象，再来拿上面的注解<br>④比如注解作用在成员变量上，则要获得该成员变量对应的Field对象，再来拿上面的注解</p><p>动态代理：代理就是被代理者没有能力或者不愿意去完成某件事情，需要找个人代替自己去完成这件事，动态代理就是用来对业务功能（方法）进行代理的。<br>①必须有接口，实现类要实现接口（代理通常是基于接口实现的）。<br>②创建一个实现类的对象，该对象为业务对象，紧接着为业务对象做一个代理对象。</p><p>代理类：Proxy<br>Public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,<br>InvocationHandle h)：为对象返回一个代理对象<br>用方法返回代理对象时，返回对象类型应该用接口类<br>参数一：定义加载类（被代理类）的类加载器<br>参数二：代理类要实现的接口列表<br>参数三：（用匿名内部类的方式new一个InvocationHandle对象）将方法调用分配到的处理程序（代理对象的核心处理程序）</p><p>动态代理的优点：<br>①可以在不改变方法源码的情况下，实现对方法功能的增强，提高了代码的复用性<br>②简化了编程工作，提高了编程效率，同时提高了软件系统的可扩展性<br>③可以为被代理对象的所有方法做代理<br>④非常的灵活，支持任意接口类型的实现类对象做代理，也可以直接为接口本身做代理</p><p>设计模式：<br>工厂设计模式：可以封装对象的创建细节，可以实现类与类之间的解耦操作<br>装饰模式：创建一个新类，包装原始类，从而在新类中提升原来类的功能<br>作用：不改变原类的基础上，动态地扩展一个类的功能<br>①定义父类②定义原始类，继承父类，定义功能③定义装饰类，继承父类，包装原始类，增强功能</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
